# Form implementation generated from reading ui file 'form.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt6 import QtCore, QtGui, QtWidgets

class Ui_Widget(object):
    def setupUi(self, Widget):
        Widget.setObjectName("Widget")
        Widget.setWindowModality(QtCore.Qt.WindowModality.WindowModal)
        Widget.setEnabled(True)
        Widget.resize(1920, 1080)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(Widget.sizePolicy().hasHeightForWidth())
        Widget.setSizePolicy(sizePolicy)
        Widget.setMinimumSize(QtCore.QSize(0, 0))
        Widget.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.ArrowCursor))
        Widget.setMouseTracking(False)
        Widget.setContextMenuPolicy(QtCore.Qt.ContextMenuPolicy.NoContextMenu)
        Widget.setAcceptDrops(False)
        Widget.setToolTip("")
        Widget.setStatusTip("")
        Widget.setWhatsThis("")
        Widget.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        Widget.setAutoFillBackground(False)
        Widget.setStyleSheet( \
            "QWidget {\n"
			"    background-color: rgb(0, 0, 79)\n"
			"}")
        
        self.MainFrame = QtWidgets.QFrame(parent=Widget)
        self.MainFrame.setGeometry(QtCore.QRect(20, 20, 1240, 660))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.MainFrame.sizePolicy().hasHeightForWidth())
        self.MainFrame.setSizePolicy(sizePolicy)
        self.MainFrame.setStyleSheet( \
            "QWidget {\n"
			"    background-color: rgb(255, 255, 255)\n"
			"}")
        
        self.MainFrame.setFrameShape(QtWidgets.QFrame.Shape.Box)
        self.MainFrame.setFrameShadow(QtWidgets.QFrame.Shadow.Plain)
        self.MainFrame.setObjectName("MainFrame")
        self.MainApplicationTitle = QtWidgets.QLabel(parent=self.MainFrame)
        self.MainApplicationTitle.setGeometry(QtCore.QRect(20, 2, 1200, 51))
        
        font = QtGui.QFont()
        font.setFamily("Segoe UI Variable Display")
        font.setPointSize(24)
        
        self.MainApplicationTitle.setFont(font)
        self.MainApplicationTitle.setScaledContents(False)
        self.MainApplicationTitle.setWordWrap(False)
        self.MainApplicationTitle.setObjectName("MainApplicationTitle")
        
        self.LineXAxisMainApplicationTitleAndButtonsOfParametersSeparator = QtWidgets.QFrame(parent=self.MainFrame)
        self.LineXAxisMainApplicationTitleAndButtonsOfParametersSeparator.setGeometry(QtCore.QRect(20, 50, 1201, 16))
        self.LineXAxisMainApplicationTitleAndButtonsOfParametersSeparator.setFrameShape(QtWidgets.QFrame.Shape.HLine)
        self.LineXAxisMainApplicationTitleAndButtonsOfParametersSeparator.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.LineXAxisMainApplicationTitleAndButtonsOfParametersSeparator.setObjectName("LineXAxisMainApplicationTitleAndButtonsOfParametersSeparator")
        
        self.ImageProcessingButton = QtWidgets.QPushButton(parent=self.MainFrame)
        self.ImageProcessingButton.setGeometry(QtCore.QRect(20, 70, 80, 30))
        font = QtGui.QFont()
        font.setFamily("Segoe UI Variable Display")
        font.setBold(True)
        font.setItalic(False)
        self.ImageProcessingButton.setFont(font)
        self.ImageProcessingButton.setWhatsThis("")
        self.ImageProcessingButton.setStyleSheet( \
            "QPushButton {\n"
			"    font: bold;\n"
			"    border-radius: 10px;\n"
			"    color: rgb(255, 255, 255);\n"
			"    background-color: rgb(220, 85, 0);\n"
			"}\n"
			"\n"
			"QPushButton:hover {\n"
			"    background-color: rgb(255, 85, 0);\n"
			"}\n"
			"\n"
			"QPushButton:pressed {\n"
			"    background-color: rgb(185, 85, 0);\n"
			"}")
        
        self.ImageProcessingButton.setCheckable(False)
        self.ImageProcessingButton.setAutoDefault(False)
        self.ImageProcessingButton.setDefault(False)
        self.ImageProcessingButton.setFlat(False)
        self.ImageProcessingButton.setObjectName("ImageProcessingButton")
        self.VideoProcessingButton = QtWidgets.QPushButton(parent=self.MainFrame)
        self.VideoProcessingButton.setGeometry(QtCore.QRect(105, 70, 80, 30))
        
        font = QtGui.QFont()
        font.setFamily("Segoe UI Variable Display")
        font.setBold(True)
        font.setItalic(False)
        
        self.VideoProcessingButton.setFont(font)
        self.VideoProcessingButton.setStyleSheet( \
            "QPushButton {\n"
			"    font: bold;\n"
			"    border-radius: 10px;\n"
			"    color: rgb(255, 255, 255);\n"
			"    background-color: rgb(220, 85, 0);\n"
			"}\n"
			"\n"
			"QPushButton:hover {\n"
			"    background-color: rgb(255, 85, 0);\n"
			"}\n"
			"\n"
			"QPushButton:pressed {\n"
			"    background-color: rgb(185, 85, 0);\n"
			"}")
        
        self.VideoProcessingButton.setCheckable(False)
        self.VideoProcessingButton.setAutoDefault(False)
        self.VideoProcessingButton.setDefault(False)
        self.VideoProcessingButton.setFlat(False)
        self.VideoProcessingButton.setObjectName("VideoProcessingButton")
        
        self.StreamingButton = QtWidgets.QPushButton(parent=self.MainFrame)
        self.StreamingButton.setGeometry(QtCore.QRect(190, 70, 110, 30))
        font = QtGui.QFont()
        font.setFamily("Segoe UI Variable Display")
        font.setBold(True)
        font.setItalic(False)
        self.StreamingButton.setFont(font)
        self.StreamingButton.setStyleSheet( \
            "QPushButton {\n"
			"    font: bold;\n"
			"    border-radius: 10px;\n"
			"    color: rgb(255, 255, 255);\n"
			"    background-color: rgb(220, 170, 0);\n"
			"}\n"
			"\n"
			"QPushButton:hover {\n"
			"    background-color: rgb(255, 170, 0);\n"
			"}\n"
			"\n"
			"QPushButton:pressed {\n"
			"    background-color: rgb(185, 170, 0);\n"
			"}")
        
        self.StreamingButton.setCheckable(False)
        self.StreamingButton.setAutoDefault(False)
        self.StreamingButton.setDefault(False)
        self.StreamingButton.setFlat(False)
        self.StreamingButton.setObjectName("StreamingButton")
        
        self.RecordingButton = QtWidgets.QPushButton(parent=self.MainFrame)
        self.RecordingButton.setGeometry(QtCore.QRect(305, 70, 110, 30))
        font = QtGui.QFont()
        font.setFamily("Segoe UI Variable Display")
        font.setBold(True)
        font.setItalic(False)
        self.RecordingButton.setFont(font)
        self.RecordingButton.setStyleSheet( \
            "QPushButton {\n"
			"    font: bold;\n"
			"    border-radius: 10px;\n"
			"    color: rgb(255, 255, 255);\n"
			"    background-color: rgb(220, 170, 0);\n"
			"}\n"
			"\n"
			"QPushButton:hover {\n"
			"    background-color: rgb(255, 170, 0);\n"
			"}\n"
			"\n"
			"QPushButton:pressed {\n"
			"    background-color: rgb(185, 170, 0);\n"
			"}")
        
        self.RecordingButton.setCheckable(False)
        self.RecordingButton.setAutoDefault(False)
        self.RecordingButton.setDefault(False)
        self.RecordingButton.setFlat(False)
        self.RecordingButton.setObjectName("RecordingButton")
        
        self.LineXAxisIVSRAndSPSeparator = QtWidgets.QFrame(parent=self.MainFrame)
        self.LineXAxisIVSRAndSPSeparator.setGeometry(QtCore.QRect(421, 65, 5, 40))
        self.LineXAxisIVSRAndSPSeparator.setFrameShape(QtWidgets.QFrame.Shape.VLine)
        self.LineXAxisIVSRAndSPSeparator.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.LineXAxisIVSRAndSPSeparator.setObjectName("LineXAxisIVSRAndSPSeparator")
        self.SaveParametersButton = QtWidgets.QPushButton(parent=self.MainFrame)
        self.SaveParametersButton.setGeometry(QtCore.QRect(431, 70, 160, 30))
        font = QtGui.QFont()
        font.setFamily("Segoe UI Variable Display")
        font.setPointSize(10)
        font.setBold(True)
        font.setItalic(False)
        self.SaveParametersButton.setFont(font)
        self.SaveParametersButton.setStyleSheet( \
            "QPushButton {\n"
			"    font: bold;\n"
			"    border-radius: 10px;\n"
			"    color: rgb(255, 255, 255);\n"
			"    background-color: rgb(0, 220, 127);\n"
			"}\n"
			"\n"
			"QPushButton:hover {\n"
			"    background-color: rgb(0, 255, 127);\n"
			"}\n"
			"\n"
			"QPushButton:pressed {\n"
			"    background-color: rgb(0, 185, 127);\n"
			"}")
        
        self.SaveParametersButton.setCheckable(False)
        self.SaveParametersButton.setAutoRepeat(True)
        self.SaveParametersButton.setAutoDefault(False)
        self.SaveParametersButton.setDefault(False)
        self.SaveParametersButton.setFlat(False)
        self.SaveParametersButton.setObjectName("SaveParametersButton")
        
        self.LineXAxisButtonsOfParametersSeparator = QtWidgets.QFrame(parent=self.MainFrame)
        self.LineXAxisButtonsOfParametersSeparator.setGeometry(QtCore.QRect(20, 105, 1201, 16))
        self.LineXAxisButtonsOfParametersSeparator.setFrameShape(QtWidgets.QFrame.Shape.HLine)
        self.LineXAxisButtonsOfParametersSeparator.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.LineXAxisButtonsOfParametersSeparator.setObjectName("LineXAxisButtonsOfParametersSeparator")
        
        self.FishEyeMonitoringLayoutWidget = QtWidgets.QWidget(parent=self.MainFrame)
        self.FishEyeMonitoringLayoutWidget.setGeometry(QtCore.QRect(20, 120, 1201, 331))
        self.FishEyeMonitoringLayoutWidget.setObjectName("gridLayoutWidget")
        
        self.CameraFieldViewLayout = QtWidgets.QGridLayout(self.FishEyeMonitoringLayoutWidget)
        self.CameraFieldViewLayout.setContentsMargins(0, 0, 0, 0)
        self.CameraFieldViewLayout.setObjectName("CameraFieldViewLayout")
        
        self.FCFV_SecondZoneView = QtWidgets.QGraphicsView(parent=self.FishEyeMonitoringLayoutWidget)
        self.FCFV_SecondZoneView.setFrameShape(QtWidgets.QFrame.Shape.Box)
        self.FCFV_SecondZoneView.setFrameShadow(QtWidgets.QFrame.Shadow.Plain)
        self.FCFV_SecondZoneView.setObjectName("FCFV_SecondZoneView")
        self.CameraFieldViewLayout.addWidget(self.FCFV_SecondZoneView, 1, 2, 1, 1)
        
        font = QtGui.QFont()
        font.setFamily("Segoe UI Variable Display")
        font.setPointSize(11)
        self.NormalFisheyeCameraFieldView_FirstZoneLabel = QtWidgets.QLabel(parent=self.FishEyeMonitoringLayoutWidget)
        self.NormalFisheyeCameraFieldView_FirstZoneLabel.setFont(font)
        self.NormalFisheyeCameraFieldView_FirstZoneLabel.setStyleSheet( \
            "QLabel {\n"
			"    font-family: \"Segoe UI Variable Display\";\n"
			"    color: rgb(255, 255, 255);\n"
			"    background-color: rgb(150, 85, 255);\n"
			"}")
        
        self.NormalFisheyeCameraFieldView_FirstZoneLabel.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.NormalFisheyeCameraFieldView_FirstZoneLabel.setObjectName("NormalFisheyeCameraFieldView_FirstZoneLabel")
        self.CameraFieldViewLayout.addWidget(self.NormalFisheyeCameraFieldView_FirstZoneLabel, 0, 1, 1, 1)
        
        self.FCFV_OriginalView = QtWidgets.QGraphicsView(parent=self.FishEyeMonitoringLayoutWidget)
        self.FCFV_OriginalView.setFrameShape(QtWidgets.QFrame.Shape.Box)
        self.FCFV_OriginalView.setFrameShadow(QtWidgets.QFrame.Shadow.Plain)
        self.FCFV_OriginalView.setObjectName("FCFV_OriginalView")
        self.CameraFieldViewLayout.addWidget(self.FCFV_OriginalView, 1, 0, 1, 1)
        
        self.FCFV_FirstZoneView = QtWidgets.QGraphicsView(parent=self.FishEyeMonitoringLayoutWidget)
        self.FCFV_FirstZoneView.setFrameShape(QtWidgets.QFrame.Shape.Box)
        self.FCFV_FirstZoneView.setFrameShadow(QtWidgets.QFrame.Shadow.Plain)
        self.FCFV_FirstZoneView.setObjectName("FCFV_FirstZoneView")
        self.CameraFieldViewLayout.addWidget(self.FCFV_FirstZoneView, 1, 1, 1, 1)
        self.NormalFisheyeCameraFieldView_SecondZoneLabel = QtWidgets.QLabel(parent=self.FishEyeMonitoringLayoutWidget)
        
        font = QtGui.QFont()
        font.setFamily("Segoe UI Variable Display")
        font.setPointSize(11)
        self.NormalFisheyeCameraFieldView_SecondZoneLabel.setFont(font)
        self.NormalFisheyeCameraFieldView_SecondZoneLabel.setStyleSheet( \
            "QLabel {\n"
			"    font-family: \"Segoe UI Variable Display\";\n"
			"    color: rgb(255, 255, 255);\n"
			"    background-color: rgb(150, 85, 255);\n"
			"}")
        
        self.NormalFisheyeCameraFieldView_SecondZoneLabel.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.NormalFisheyeCameraFieldView_SecondZoneLabel.setObjectName("NormalFisheyeCameraFieldView_SecondZoneLabel")
        self.CameraFieldViewLayout.addWidget(self.NormalFisheyeCameraFieldView_SecondZoneLabel, 0, 2, 1, 1)
        self.NormalFisheyeCameraFieldView_OriginalLabel = QtWidgets.QLabel(parent=self.FishEyeMonitoringLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Segoe UI Variable Display")
        font.setPointSize(11)
        self.NormalFisheyeCameraFieldView_OriginalLabel.setFont(font)
        self.NormalFisheyeCameraFieldView_OriginalLabel.setStyleSheet("QLabel {\n"
"    font-family: \"Segoe UI Variable Display\";\n"
"    color: rgb(255, 255, 255);\n"
"    background-color: rgb(0, 85, 255);\n"
"}")
        self.NormalFisheyeCameraFieldView_OriginalLabel.setFrameShape(QtWidgets.QFrame.Shape.NoFrame)
        self.NormalFisheyeCameraFieldView_OriginalLabel.setFrameShadow(QtWidgets.QFrame.Shadow.Plain)
        self.NormalFisheyeCameraFieldView_OriginalLabel.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.NormalFisheyeCameraFieldView_OriginalLabel.setObjectName("NormalFisheyeCameraFieldView_OriginalLabel")
        self.CameraFieldViewLayout.addWidget(self.NormalFisheyeCameraFieldView_OriginalLabel, 0, 0, 1, 1)
        self.FCFV_OriginalOperationField = QtWidgets.QGridLayout()
        self.FCFV_OriginalOperationField.setObjectName("FCFV_OriginalOperationField")
        self.FCFV_OOF_ViewSecondZoneRadioButton = QtWidgets.QRadioButton(parent=self.FishEyeMonitoringLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Segoe UI Variable Display")
        font.setBold(True)
        font.setItalic(False)
        self.FCFV_OOF_ViewSecondZoneRadioButton.setFont(font)
        self.FCFV_OOF_ViewSecondZoneRadioButton.setStyleSheet("QRadioButton {\n"
"    font: bold;\n"
"}\n"
"\n"
"QRadioButton:hover {\n"
"    color: rgb(255, 150, 255);\n"
"}\n"
"\n"
"QRadioButton:pressed {\n"
"    color: rgb(255, 115, 255);\n"
"}")
        self.FCFV_OOF_ViewSecondZoneRadioButton.setObjectName("FCFV_OOF_ViewSecondZoneRadioButton")
        self.FCFV_OriginalOperationField.addWidget(self.FCFV_OOF_ViewSecondZoneRadioButton, 1, 3, 1, 1)
        self.FCFV_OOF_RotateLabel = QtWidgets.QLabel(parent=self.FishEyeMonitoringLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Segoe UI Variable Display")
        self.FCFV_OOF_RotateLabel.setFont(font)
        self.FCFV_OOF_RotateLabel.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.FCFV_OOF_RotateLabel.setObjectName("FCFV_OOF_RotateLabel")
        self.FCFV_OriginalOperationField.addWidget(self.FCFV_OOF_RotateLabel, 0, 0, 1, 1)
        self.FCFV_OOF_RotateSpinBox = QtWidgets.QSpinBox(parent=self.FishEyeMonitoringLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Fira Code")
        self.FCFV_OOF_RotateSpinBox.setFont(font)
        self.FCFV_OOF_RotateSpinBox.setMaximum(360)
        self.FCFV_OOF_RotateSpinBox.setObjectName("FCFV_OOF_RotateSpinBox")
        self.FCFV_OriginalOperationField.addWidget(self.FCFV_OOF_RotateSpinBox, 0, 1, 1, 1)
        self.FCFV_OOF_LineYAxis01Separator = QtWidgets.QFrame(parent=self.FishEyeMonitoringLayoutWidget)
        self.FCFV_OOF_LineYAxis01Separator.setFrameShape(QtWidgets.QFrame.Shape.VLine)
        self.FCFV_OOF_LineYAxis01Separator.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.FCFV_OOF_LineYAxis01Separator.setObjectName("FCFV_OOF_LineYAxis01Separator")
        self.FCFV_OriginalOperationField.addWidget(self.FCFV_OOF_LineYAxis01Separator, 0, 2, 1, 1)
        self.FCFV_OOF_LineYAxis02Separator = QtWidgets.QFrame(parent=self.FishEyeMonitoringLayoutWidget)
        self.FCFV_OOF_LineYAxis02Separator.setFrameShape(QtWidgets.QFrame.Shape.VLine)
        self.FCFV_OOF_LineYAxis02Separator.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.FCFV_OOF_LineYAxis02Separator.setObjectName("FCFV_OOF_LineYAxis02Separator")
        self.FCFV_OriginalOperationField.addWidget(self.FCFV_OOF_LineYAxis02Separator, 1, 2, 1, 1)
        self.FCFV_OOF_ViewFirstZoneRadioButton = QtWidgets.QRadioButton(parent=self.FishEyeMonitoringLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Segoe UI Variable Display")
        font.setBold(True)
        font.setItalic(False)
        self.FCFV_OOF_ViewFirstZoneRadioButton.setFont(font)
        self.FCFV_OOF_ViewFirstZoneRadioButton.setStyleSheet("QRadioButton {\n"
"    font: bold;\n"
"}\n"
"\n"
"QRadioButton:hover {\n"
"    color: rgb(85, 170, 255);\n"
"}\n"
"\n"
"QRadioButton:pressed {\n"
"    color: rgb(85, 135, 255);\n"
"}")
        self.FCFV_OOF_ViewFirstZoneRadioButton.setObjectName("FCFV_OOF_ViewFirstZoneRadioButton")
        self.FCFV_OriginalOperationField.addWidget(self.FCFV_OOF_ViewFirstZoneRadioButton, 0, 3, 1, 1)
        self.CameraFieldViewLayout.addLayout(self.FCFV_OriginalOperationField, 2, 0, 1, 1)
        self.gridLayoutWidget_4 = QtWidgets.QWidget(parent=self.MainFrame)
        self.gridLayoutWidget_4.setGeometry(QtCore.QRect(20, 455, 1201, 156))
        self.gridLayoutWidget_4.setObjectName("gridLayoutWidget_4")
        self.PlateDetectionLayout = QtWidgets.QGridLayout(self.gridLayoutWidget_4)
        self.PlateDetectionLayout.setContentsMargins(0, 0, 0, 0)
        self.PlateDetectionLayout.setObjectName("PlateDetectionLayout")
        self.PlateDetectionFirstZoneLabel = QtWidgets.QLabel(parent=self.gridLayoutWidget_4)
        font = QtGui.QFont()
        font.setFamily("Segoe UI Variable Display")
        font.setPointSize(11)
        self.PlateDetectionFirstZoneLabel.setFont(font)
        self.PlateDetectionFirstZoneLabel.setStyleSheet("QLabel {\n"
"    font-family: \"Segoe UI Variable Display\";\n"
"    color: rgb(255, 255, 255);\n"
"    background-color: rgb(150, 85, 255);\n"
"}")
        self.PlateDetectionFirstZoneLabel.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.PlateDetectionFirstZoneLabel.setObjectName("PlateDetectionFirstZoneLabel")
        self.PlateDetectionLayout.addWidget(self.PlateDetectionFirstZoneLabel, 0, 1, 1, 1)
        self.PDZ02GraphicalFieldView = QtWidgets.QGraphicsView(parent=self.gridLayoutWidget_4)
        self.PDZ02GraphicalFieldView.setFrameShape(QtWidgets.QFrame.Shape.Box)
        self.PDZ02GraphicalFieldView.setFrameShadow(QtWidgets.QFrame.Shadow.Plain)
        self.PDZ02GraphicalFieldView.setObjectName("PDZ02GraphicalFieldView")
        self.PlateDetectionLayout.addWidget(self.PDZ02GraphicalFieldView, 1, 2, 1, 1)
        self.PlateDetectionOriginalLabel = QtWidgets.QLabel(parent=self.gridLayoutWidget_4)
        font = QtGui.QFont()
        font.setFamily("Segoe UI Variable Display")
        font.setPointSize(11)
        self.PlateDetectionOriginalLabel.setFont(font)
        self.PlateDetectionOriginalLabel.setStyleSheet("QLabel {\n"
"    font-family: \"Segoe UI Variable Display\";\n"
"    color: rgb(255, 255, 255);\n"
"    background-color: rgb(0, 85, 255);\n"
"}")
        self.PlateDetectionOriginalLabel.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.PlateDetectionOriginalLabel.setObjectName("PlateDetectionOriginalLabel")
        self.PlateDetectionLayout.addWidget(self.PlateDetectionOriginalLabel, 0, 0, 1, 1)
        self.PlateDetectionSecondZoneLabel = QtWidgets.QLabel(parent=self.gridLayoutWidget_4)
        font = QtGui.QFont()
        font.setFamily("Segoe UI Variable Display")
        font.setPointSize(11)
        self.PlateDetectionSecondZoneLabel.setFont(font)
        self.PlateDetectionSecondZoneLabel.setStyleSheet("QLabel {\n"
"    font-family: \"Segoe UI Variable Display\";\n"
"    color: rgb(255, 255, 255);\n"
"    background-color: rgb(150, 85, 255);\n"
"}")
        self.PlateDetectionSecondZoneLabel.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.PlateDetectionSecondZoneLabel.setObjectName("PlateDetectionSecondZoneLabel")
        self.PlateDetectionLayout.addWidget(self.PlateDetectionSecondZoneLabel, 0, 2, 1, 1)
        self.PDOGraphicalFieldView = QtWidgets.QGraphicsView(parent=self.gridLayoutWidget_4)
        self.PDOGraphicalFieldView.setFrameShape(QtWidgets.QFrame.Shape.Box)
        self.PDOGraphicalFieldView.setFrameShadow(QtWidgets.QFrame.Shadow.Plain)
        self.PDOGraphicalFieldView.setObjectName("PDOGraphicalFieldView")
        self.PlateDetectionLayout.addWidget(self.PDOGraphicalFieldView, 1, 0, 1, 1)
        self.PlateDetectionFirstZoneLayout = QtWidgets.QHBoxLayout()
        self.PlateDetectionFirstZoneLayout.setObjectName("PlateDetectionFirstZoneLayout")
        self.CountDetectedPDZ01Label = QtWidgets.QLabel(parent=self.gridLayoutWidget_4)
        font = QtGui.QFont()
        font.setFamily("Segoe UI Variable Display")
        font.setPointSize(8)
        self.CountDetectedPDZ01Label.setFont(font)
        self.CountDetectedPDZ01Label.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.CountDetectedPDZ01Label.setObjectName("CountDetectedPDZ01Label")
        self.PlateDetectionFirstZoneLayout.addWidget(self.CountDetectedPDZ01Label)
        self.CountDetectedPDZ01LineEdit = QtWidgets.QLineEdit(parent=self.gridLayoutWidget_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.CountDetectedPDZ01LineEdit.sizePolicy().hasHeightForWidth())
        self.CountDetectedPDZ01LineEdit.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Fira Code")
        self.CountDetectedPDZ01LineEdit.setFont(font)
        self.CountDetectedPDZ01LineEdit.setReadOnly(True)
        self.CountDetectedPDZ01LineEdit.setObjectName("CountDetectedPDZ01LineEdit")
        self.PlateDetectionFirstZoneLayout.addWidget(self.CountDetectedPDZ01LineEdit)
        self.PredictionPDZ02Label_2 = QtWidgets.QLabel(parent=self.gridLayoutWidget_4)
        font = QtGui.QFont()
        font.setFamily("Segoe UI Variable Display")
        font.setPointSize(8)
        self.PredictionPDZ02Label_2.setFont(font)
        self.PredictionPDZ02Label_2.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.PredictionPDZ02Label_2.setObjectName("PredictionPDZ02Label_2")
        self.PlateDetectionFirstZoneLayout.addWidget(self.PredictionPDZ02Label_2)
        self.PredictionPDZ01LineEdit = QtWidgets.QLineEdit(parent=self.gridLayoutWidget_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.PredictionPDZ01LineEdit.sizePolicy().hasHeightForWidth())
        self.PredictionPDZ01LineEdit.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Fira Code")
        self.PredictionPDZ01LineEdit.setFont(font)
        self.PredictionPDZ01LineEdit.setReadOnly(True)
        self.PredictionPDZ01LineEdit.setObjectName("PredictionPDZ01LineEdit")
        self.PlateDetectionFirstZoneLayout.addWidget(self.PredictionPDZ01LineEdit)
        self.SaveButtonPDZ01 = QtWidgets.QPushButton(parent=self.gridLayoutWidget_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.SaveButtonPDZ01.sizePolicy().hasHeightForWidth())
        self.SaveButtonPDZ01.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Segoe UI Variable Display")
        font.setPointSize(9)
        font.setBold(True)
        font.setItalic(False)
        self.SaveButtonPDZ01.setFont(font)
        self.SaveButtonPDZ01.setStyleSheet("QPushButton {\n"
"    font: bold;\n"
"    color: rgb(255, 255, 255);\n"
"    background-color: rgb(0, 220, 127);\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: rgb(0, 255, 127);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(0, 185, 127);\n"
"}")
        self.SaveButtonPDZ01.setCheckable(False)
        self.SaveButtonPDZ01.setAutoRepeat(True)
        self.SaveButtonPDZ01.setAutoDefault(False)
        self.SaveButtonPDZ01.setDefault(False)
        self.SaveButtonPDZ01.setFlat(False)
        self.SaveButtonPDZ01.setObjectName("SaveButtonPDZ01")
        self.PlateDetectionFirstZoneLayout.addWidget(self.SaveButtonPDZ01)
        self.PlateDetectionLayout.addLayout(self.PlateDetectionFirstZoneLayout, 2, 1, 1, 1)
        self.PDZ01GraphicalFieldView = QtWidgets.QGraphicsView(parent=self.gridLayoutWidget_4)
        self.PDZ01GraphicalFieldView.setFrameShape(QtWidgets.QFrame.Shape.Box)
        self.PDZ01GraphicalFieldView.setFrameShadow(QtWidgets.QFrame.Shadow.Plain)
        self.PDZ01GraphicalFieldView.setObjectName("PDZ01GraphicalFieldView")
        self.PlateDetectionLayout.addWidget(self.PDZ01GraphicalFieldView, 1, 1, 1, 1)
        self.PlateDetectionSecondZoneLayout = QtWidgets.QHBoxLayout()
        self.PlateDetectionSecondZoneLayout.setObjectName("PlateDetectionSecondZoneLayout")
        self.CountDetectedPD02Label = QtWidgets.QLabel(parent=self.gridLayoutWidget_4)
        font = QtGui.QFont()
        font.setFamily("Segoe UI Variable Display")
        font.setPointSize(8)
        self.CountDetectedPD02Label.setFont(font)
        self.CountDetectedPD02Label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.CountDetectedPD02Label.setObjectName("CountDetectedPD02Label")
        self.PlateDetectionSecondZoneLayout.addWidget(self.CountDetectedPD02Label)
        self.CountDetectedPDZ02LineEdit = QtWidgets.QLineEdit(parent=self.gridLayoutWidget_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.CountDetectedPDZ02LineEdit.sizePolicy().hasHeightForWidth())
        self.CountDetectedPDZ02LineEdit.setSizePolicy(sizePolicy)
        self.CountDetectedPDZ02LineEdit.setReadOnly(True)
        self.CountDetectedPDZ02LineEdit.setObjectName("CountDetectedPDZ02LineEdit")
        self.PlateDetectionSecondZoneLayout.addWidget(self.CountDetectedPDZ02LineEdit)
        self.PredictionPDZ02Label = QtWidgets.QLabel(parent=self.gridLayoutWidget_4)
        font = QtGui.QFont()
        font.setFamily("Segoe UI Variable Display")
        font.setPointSize(8)
        self.PredictionPDZ02Label.setFont(font)
        self.PredictionPDZ02Label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.PredictionPDZ02Label.setObjectName("PredictionPDZ02Label")
        self.PlateDetectionSecondZoneLayout.addWidget(self.PredictionPDZ02Label)
        self.PredictionPDZ02LineEdit = QtWidgets.QLineEdit(parent=self.gridLayoutWidget_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.PredictionPDZ02LineEdit.sizePolicy().hasHeightForWidth())
        self.PredictionPDZ02LineEdit.setSizePolicy(sizePolicy)
        self.PredictionPDZ02LineEdit.setReadOnly(True)
        self.PredictionPDZ02LineEdit.setObjectName("PredictionPDZ02LineEdit")
        self.PlateDetectionSecondZoneLayout.addWidget(self.PredictionPDZ02LineEdit)
        self.SaveButtonPDZ02 = QtWidgets.QPushButton(parent=self.gridLayoutWidget_4)
        font = QtGui.QFont()
        font.setFamily("Segoe UI Variable Display")
        font.setPointSize(9)
        font.setBold(True)
        font.setItalic(False)
        self.SaveButtonPDZ02.setFont(font)
        self.SaveButtonPDZ02.setStyleSheet("QPushButton {\n"
"    font: bold;\n"
"    color: rgb(255, 255, 255);\n"
"    background-color: rgb(0, 220, 127);\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: rgb(0, 255, 127);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(0, 185, 127);\n"
"}")
        icon = QtGui.QIcon.fromTheme("applications-other")
        self.SaveButtonPDZ02.setIcon(icon)
        self.SaveButtonPDZ02.setCheckable(False)
        self.SaveButtonPDZ02.setAutoRepeat(True)
        self.SaveButtonPDZ02.setAutoDefault(False)
        self.SaveButtonPDZ02.setDefault(False)
        self.SaveButtonPDZ02.setFlat(False)
        self.SaveButtonPDZ02.setObjectName("SaveButtonPDZ02")
        self.PlateDetectionSecondZoneLayout.addWidget(self.SaveButtonPDZ02)
        self.PlateDetectionLayout.addLayout(self.PlateDetectionSecondZoneLayout, 2, 2, 1, 1)
        self.PlateDetectionOriginalLayout = QtWidgets.QHBoxLayout()
        self.PlateDetectionOriginalLayout.setObjectName("PlateDetectionOriginalLayout")
        self.CountDetectedPDOLabel = QtWidgets.QLabel(parent=self.gridLayoutWidget_4)
        font = QtGui.QFont()
        font.setFamily("Segoe UI Variable Display")
        font.setPointSize(8)
        self.CountDetectedPDOLabel.setFont(font)
        self.CountDetectedPDOLabel.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.CountDetectedPDOLabel.setObjectName("CountDetectedPDOLabel")
        self.PlateDetectionOriginalLayout.addWidget(self.CountDetectedPDOLabel)
        self.CountDetectedPDOLineEdit = QtWidgets.QLineEdit(parent=self.gridLayoutWidget_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.CountDetectedPDOLineEdit.sizePolicy().hasHeightForWidth())
        self.CountDetectedPDOLineEdit.setSizePolicy(sizePolicy)
        self.CountDetectedPDOLineEdit.setReadOnly(True)
        self.CountDetectedPDOLineEdit.setObjectName("CountDetectedPDOLineEdit")
        self.PlateDetectionOriginalLayout.addWidget(self.CountDetectedPDOLineEdit)
        self.PredictionPDOLabel = QtWidgets.QLabel(parent=self.gridLayoutWidget_4)
        font = QtGui.QFont()
        font.setFamily("Segoe UI Variable Display")
        font.setPointSize(8)
        self.PredictionPDOLabel.setFont(font)
        self.PredictionPDOLabel.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.PredictionPDOLabel.setObjectName("PredictionPDOLabel")
        self.PlateDetectionOriginalLayout.addWidget(self.PredictionPDOLabel)
        self.PredictionPDOLineEdit = QtWidgets.QLineEdit(parent=self.gridLayoutWidget_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.PredictionPDOLineEdit.sizePolicy().hasHeightForWidth())
        self.PredictionPDOLineEdit.setSizePolicy(sizePolicy)
        self.PredictionPDOLineEdit.setReadOnly(True)
        self.PredictionPDOLineEdit.setObjectName("PredictionPDOLineEdit")
        self.PlateDetectionOriginalLayout.addWidget(self.PredictionPDOLineEdit)
        self.ShowResultButtonPDO = QtWidgets.QPushButton(parent=self.gridLayoutWidget_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ShowResultButtonPDO.sizePolicy().hasHeightForWidth())
        self.ShowResultButtonPDO.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Segoe UI Variable Display")
        font.setPointSize(9)
        font.setBold(True)
        font.setItalic(False)
        self.ShowResultButtonPDO.setFont(font)
        self.ShowResultButtonPDO.setStyleSheet("QPushButton {\n"
"    font: bold;\n"
"    color: rgb(255, 255, 255);\n"
"    background-color: rgb(255, 85, 220);\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: rgb(255, 120, 255);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(255, 15, 185);\n"
"}")
        self.ShowResultButtonPDO.setObjectName("ShowResultButtonPDO")
        self.PlateDetectionOriginalLayout.addWidget(self.ShowResultButtonPDO)
        self.PlateDetectionLayout.addLayout(self.PlateDetectionOriginalLayout, 2, 0, 1, 1)
        self.horizontalLayoutWidget_5 = QtWidgets.QWidget(parent=self.MainFrame)
        self.horizontalLayoutWidget_5.setGeometry(QtCore.QRect(423, 625, 121, 21))
        self.horizontalLayoutWidget_5.setObjectName("horizontalLayoutWidget_5")
        self.FourProcessingAnalyticalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_5)
        self.FourProcessingAnalyticalLayout.setContentsMargins(0, 0, 0, 0)
        self.FourProcessingAnalyticalLayout.setObjectName("FourProcessingAnalyticalLayout")
        self.ButtonID01 = QtWidgets.QPushButton(parent=self.horizontalLayoutWidget_5)
        font = QtGui.QFont()
        font.setFamily("Fira Code Medium")
        font.setBold(True)
        font.setItalic(False)
        self.ButtonID01.setFont(font)
        self.ButtonID01.setStyleSheet("QPushButton {\n"
"    font: bold;\n"
"    background-color: rgb(85, 85, 127);\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: rgb(85, 120, 255);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    color: white;\n"
"    background-color: rgb(85, 190, 255);\n"
"}")
        self.ButtonID01.setObjectName("ButtonID01")
        self.FourProcessingAnalyticalLayout.addWidget(self.ButtonID01)
        self.ButtonID02 = QtWidgets.QPushButton(parent=self.horizontalLayoutWidget_5)
        font = QtGui.QFont()
        font.setFamily("Fira Code Medium")
        font.setBold(True)
        font.setItalic(False)
        self.ButtonID02.setFont(font)
        self.ButtonID02.setStyleSheet("QPushButton {\n"
"    font: bold;\n"
"    background-color: rgb(85, 85, 127);\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: rgb(85, 120, 255);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    color: white;\n"
"    background-color: rgb(85, 190, 255);\n"
"}")
        self.ButtonID02.setObjectName("ButtonID02")
        self.FourProcessingAnalyticalLayout.addWidget(self.ButtonID02)
        self.ButtonID03 = QtWidgets.QPushButton(parent=self.horizontalLayoutWidget_5)
        font = QtGui.QFont()
        font.setFamily("Fira Code Medium")
        font.setBold(True)
        font.setItalic(False)
        self.ButtonID03.setFont(font)
        self.ButtonID03.setStyleSheet("QPushButton {\n"
"    font: bold;\n"
"    background-color: rgb(85, 85, 127);\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: rgb(85, 120, 255);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    color: white;\n"
"    background-color: rgb(85, 190, 255);\n"
"}")
        self.ButtonID03.setObjectName("ButtonID03")
        self.FourProcessingAnalyticalLayout.addWidget(self.ButtonID03)
        self.ButtonID04 = QtWidgets.QPushButton(parent=self.horizontalLayoutWidget_5)
        font = QtGui.QFont()
        font.setFamily("Fira Code Medium")
        font.setBold(True)
        font.setItalic(False)
        self.ButtonID04.setFont(font)
        self.ButtonID04.setStyleSheet("QPushButton {\n"
"    font: bold;\n"
"    background-color: rgb(85, 85, 127);\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: rgb(85, 120, 255);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    color: white;\n"
"    background-color: rgb(85, 190, 255);\n"
"}")
        self.ButtonID04.setAutoExclusive(False)
        self.ButtonID04.setFlat(False)
        self.ButtonID04.setObjectName("ButtonID04")
        self.FourProcessingAnalyticalLayout.addWidget(self.ButtonID04)
        self.SliderReviewer = QtWidgets.QSlider(parent=self.MainFrame)
        self.SliderReviewer.setGeometry(QtCore.QRect(604, 625, 160, 20))
        self.SliderReviewer.setAutoFillBackground(False)
        self.SliderReviewer.setStyleSheet("")
        self.SliderReviewer.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.SliderReviewer.setObjectName("SliderReviewer")
        self.LeftSideSliderNumberDisplayer = QtWidgets.QLineEdit(parent=self.MainFrame)
        self.LeftSideSliderNumberDisplayer.setGeometry(QtCore.QRect(549, 625, 50, 20))
        font = QtGui.QFont()
        font.setFamily("Fira Code")
        self.LeftSideSliderNumberDisplayer.setFont(font)
        self.LeftSideSliderNumberDisplayer.setInputMask("")
        self.LeftSideSliderNumberDisplayer.setFrame(True)
        self.LeftSideSliderNumberDisplayer.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.LeftSideSliderNumberDisplayer.setReadOnly(True)
        self.LeftSideSliderNumberDisplayer.setPlaceholderText("")
        self.LeftSideSliderNumberDisplayer.setObjectName("LeftSideSliderNumberDisplayer")
        self.RightSideSliderNumberDisplayer = QtWidgets.QLineEdit(parent=self.MainFrame)
        self.RightSideSliderNumberDisplayer.setGeometry(QtCore.QRect(768, 625, 50, 20))
        font = QtGui.QFont()
        font.setFamily("Fira Code")
        self.RightSideSliderNumberDisplayer.setFont(font)
        self.RightSideSliderNumberDisplayer.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.RightSideSliderNumberDisplayer.setReadOnly(True)
        self.RightSideSliderNumberDisplayer.setObjectName("RightSideSliderNumberDisplayer")
        self.ShowResultZone1 = QtWidgets.QPushButton(parent=self.MainFrame)
        self.ShowResultZone1.setGeometry(QtCore.QRect(825, 620, 116, 30))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ShowResultZone1.sizePolicy().hasHeightForWidth())
        self.ShowResultZone1.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Segoe UI Variable Display")
        font.setPointSize(9)
        font.setBold(True)
        font.setItalic(False)
        self.ShowResultZone1.setFont(font)
        self.ShowResultZone1.setStyleSheet("QPushButton {\n"
"    font: bold;\n"
"    color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"    background-color: rgb(255, 85, 220);\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: rgb(255, 120, 255);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(255, 15, 185);\n"
"}")
        self.ShowResultZone1.setObjectName("ShowResultZone1")
        self.ShowResultZone2 = QtWidgets.QPushButton(parent=self.MainFrame)
        self.ShowResultZone2.setGeometry(QtCore.QRect(945, 620, 116, 30))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ShowResultZone2.sizePolicy().hasHeightForWidth())
        self.ShowResultZone2.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Segoe UI Variable Display")
        font.setPointSize(9)
        font.setBold(True)
        font.setItalic(False)
        self.ShowResultZone2.setFont(font)
        self.ShowResultZone2.setStyleSheet("QPushButton {\n"
"    font: bold;\n"
"    color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"    background-color: rgb(255, 85, 220);\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: rgb(255, 120, 255);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(255, 15, 185);\n"
"}")
        self.ShowResultZone2.setObjectName("ShowResultZone2")
        self.widget = QtWidgets.QWidget(parent=self.MainFrame)
        self.widget.setGeometry(QtCore.QRect(422, 405, 397, 46))
        self.widget.setObjectName("widget")
        self.FCFV_FirstZoneOperationField = QtWidgets.QGridLayout(self.widget)
        self.FCFV_FirstZoneOperationField.setContentsMargins(0, 0, 0, 0)
        self.FCFV_FirstZoneOperationField.setObjectName("FCFV_FirstZoneOperationField")
        self.FCFV_FZOF_LineYAxisOperationSeparator = QtWidgets.QFrame(parent=self.widget)
        self.FCFV_FZOF_LineYAxisOperationSeparator.setFrameShape(QtWidgets.QFrame.Shape.VLine)
        self.FCFV_FZOF_LineYAxisOperationSeparator.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.FCFV_FZOF_LineYAxisOperationSeparator.setObjectName("FCFV_FZOF_LineYAxisOperationSeparator")
        self.FCFV_FirstZoneOperationField.addWidget(self.FCFV_FZOF_LineYAxisOperationSeparator, 0, 1, 2, 1)
        self.FCFV_FZOF_SecondModeRadioButton = QtWidgets.QRadioButton(parent=self.widget)
        font = QtGui.QFont()
        font.setFamily("Segoe UI Variable Display")
        font.setBold(True)
        font.setItalic(False)
        self.FCFV_FZOF_SecondModeRadioButton.setFont(font)
        self.FCFV_FZOF_SecondModeRadioButton.setStyleSheet("QRadioButton {\n"
"    font: bold;\n"
"}\n"
"\n"
"QRadioButton:hover {\n"
"    color: rgb(255, 135, 150);\n"
"}\n"
"\n"
"QRadioButton:pressed {\n"
"    color: rgb(255, 100, 185);\n"
"}")
        self.FCFV_FZOF_SecondModeRadioButton.setObjectName("FCFV_FZOF_SecondModeRadioButton")
        self.FCFV_FirstZoneOperationField.addWidget(self.FCFV_FZOF_SecondModeRadioButton, 1, 0, 1, 1)
        self.FCFV_FZOF_FirstModeRadioButton = QtWidgets.QRadioButton(parent=self.widget)
        font = QtGui.QFont()
        font.setFamily("Segoe UI Variable Display")
        font.setBold(True)
        font.setItalic(False)
        self.FCFV_FZOF_FirstModeRadioButton.setFont(font)
        self.FCFV_FZOF_FirstModeRadioButton.setStyleSheet("QRadioButton {\n"
"    font: bold;\n"
"}\n"
"\n"
"QRadioButton:hover {\n"
"    color: rgb(255, 185, 115);\n"
"}\n"
"\n"
"QRadioButton:pressed {\n"
"    color: rgb(255, 220, 150);\n"
"}")
        self.FCFV_FZOF_FirstModeRadioButton.setObjectName("FCFV_FZOF_FirstModeRadioButton")
        self.FCFV_FirstZoneOperationField.addWidget(self.FCFV_FZOF_FirstModeRadioButton, 0, 0, 1, 1)
        self.FCFV_FZOF_BetaLabel = QtWidgets.QLabel(parent=self.widget)
        font = QtGui.QFont()
        font.setFamily("Segoe UI Variable Display")
        self.FCFV_FZOF_BetaLabel.setFont(font)
        self.FCFV_FZOF_BetaLabel.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.FCFV_FZOF_BetaLabel.setObjectName("FCFV_FZOF_BetaLabel")
        self.FCFV_FirstZoneOperationField.addWidget(self.FCFV_FZOF_BetaLabel, 0, 4, 1, 1)
        self.FCFV_FZOF_RotateLabel = QtWidgets.QLabel(parent=self.widget)
        font = QtGui.QFont()
        font.setFamily("Segoe UI Variable Display")
        self.FCFV_FZOF_RotateLabel.setFont(font)
        self.FCFV_FZOF_RotateLabel.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.FCFV_FZOF_RotateLabel.setObjectName("FCFV_FZOF_RotateLabel")
        self.FCFV_FirstZoneOperationField.addWidget(self.FCFV_FZOF_RotateLabel, 1, 4, 1, 1)
        self.FCFV_FZOF_AlphaSpinBox = QtWidgets.QSpinBox(parent=self.widget)
        font = QtGui.QFont()
        font.setFamily("Fira Code")
        self.FCFV_FZOF_AlphaSpinBox.setFont(font)
        self.FCFV_FZOF_AlphaSpinBox.setMaximum(1000)
        self.FCFV_FZOF_AlphaSpinBox.setObjectName("FCFV_FZOF_AlphaSpinBox")
        self.FCFV_FirstZoneOperationField.addWidget(self.FCFV_FZOF_AlphaSpinBox, 0, 3, 1, 1)
        self.FCFV_FZOF_ZoomInOutLabel = QtWidgets.QLabel(parent=self.widget)
        font = QtGui.QFont()
        font.setFamily("Segoe UI Variable Display")
        self.FCFV_FZOF_ZoomInOutLabel.setFont(font)
        self.FCFV_FZOF_ZoomInOutLabel.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.FCFV_FZOF_ZoomInOutLabel.setObjectName("FCFV_FZOF_ZoomInOutLabel")
        self.FCFV_FirstZoneOperationField.addWidget(self.FCFV_FZOF_ZoomInOutLabel, 1, 2, 1, 1)
        self.FCFV_FZOF_AlphaLabel = QtWidgets.QLabel(parent=self.widget)
        font = QtGui.QFont()
        font.setFamily("Segoe UI Variable Display")
        self.FCFV_FZOF_AlphaLabel.setFont(font)
        self.FCFV_FZOF_AlphaLabel.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.FCFV_FZOF_AlphaLabel.setObjectName("FCFV_FZOF_AlphaLabel")
        self.FCFV_FirstZoneOperationField.addWidget(self.FCFV_FZOF_AlphaLabel, 0, 2, 1, 1)
        self.FCFV_FZOF_BetaSpinBox = QtWidgets.QSpinBox(parent=self.widget)
        font = QtGui.QFont()
        font.setFamily("Fira Code")
        self.FCFV_FZOF_BetaSpinBox.setFont(font)
        self.FCFV_FZOF_BetaSpinBox.setMaximum(1000)
        self.FCFV_FZOF_BetaSpinBox.setObjectName("FCFV_FZOF_BetaSpinBox")
        self.FCFV_FirstZoneOperationField.addWidget(self.FCFV_FZOF_BetaSpinBox, 0, 5, 1, 1)
        self.FCFV_FZOF_ZoomInOutSpinBox = QtWidgets.QDoubleSpinBox(parent=self.widget)
        font = QtGui.QFont()
        font.setFamily("Fira Code")
        self.FCFV_FZOF_ZoomInOutSpinBox.setFont(font)
        self.FCFV_FZOF_ZoomInOutSpinBox.setMaximum(100.0)
        self.FCFV_FZOF_ZoomInOutSpinBox.setObjectName("FCFV_FZOF_ZoomInOutSpinBox")
        self.FCFV_FirstZoneOperationField.addWidget(self.FCFV_FZOF_ZoomInOutSpinBox, 1, 3, 1, 1)
        self.FCFV_FZOF_RotateSpinBox = QtWidgets.QSpinBox(parent=self.widget)
        font = QtGui.QFont()
        font.setFamily("Fira Code")
        self.FCFV_FZOF_RotateSpinBox.setFont(font)
        self.FCFV_FZOF_RotateSpinBox.setMaximum(360)
        self.FCFV_FZOF_RotateSpinBox.setObjectName("FCFV_FZOF_RotateSpinBox")
        self.FCFV_FirstZoneOperationField.addWidget(self.FCFV_FZOF_RotateSpinBox, 1, 5, 1, 1)
        self.widget1 = QtWidgets.QWidget(parent=self.MainFrame)
        self.widget1.setGeometry(QtCore.QRect(825, 406, 397, 46))
        self.widget1.setObjectName("widget1")
        self.FCFV_SecondZoneOperationField = QtWidgets.QGridLayout(self.widget1)
        self.FCFV_SecondZoneOperationField.setContentsMargins(0, 0, 0, 0)
        self.FCFV_SecondZoneOperationField.setObjectName("FCFV_SecondZoneOperationField")
        self.FCFV_SZOF_BetaSpinBox = QtWidgets.QSpinBox(parent=self.widget1)
        font = QtGui.QFont()
        font.setFamily("Fira Code")
        self.FCFV_SZOF_BetaSpinBox.setFont(font)
        self.FCFV_SZOF_BetaSpinBox.setMaximum(1000)
        self.FCFV_SZOF_BetaSpinBox.setObjectName("FCFV_SZOF_BetaSpinBox")
        self.FCFV_SecondZoneOperationField.addWidget(self.FCFV_SZOF_BetaSpinBox, 0, 5, 1, 1)
        self.FCFV_SZOF_ZoomInOutSpinBox = QtWidgets.QDoubleSpinBox(parent=self.widget1)
        font = QtGui.QFont()
        font.setFamily("Fira Code")
        self.FCFV_SZOF_ZoomInOutSpinBox.setFont(font)
        self.FCFV_SZOF_ZoomInOutSpinBox.setMaximum(100.0)
        self.FCFV_SZOF_ZoomInOutSpinBox.setSingleStep(1.0)
        self.FCFV_SZOF_ZoomInOutSpinBox.setStepType(QtWidgets.QAbstractSpinBox.StepType.AdaptiveDecimalStepType)
        self.FCFV_SZOF_ZoomInOutSpinBox.setProperty("value", 0.0)
        self.FCFV_SZOF_ZoomInOutSpinBox.setObjectName("FCFV_SZOF_ZoomInOutSpinBox")
        self.FCFV_SecondZoneOperationField.addWidget(self.FCFV_SZOF_ZoomInOutSpinBox, 1, 3, 1, 1)
        self.FCFV_SZOF_AlphaSpinBox = QtWidgets.QSpinBox(parent=self.widget1)
        font = QtGui.QFont()
        font.setFamily("Fira Code")
        self.FCFV_SZOF_AlphaSpinBox.setFont(font)
        self.FCFV_SZOF_AlphaSpinBox.setMaximum(1000)
        self.FCFV_SZOF_AlphaSpinBox.setObjectName("FCFV_SZOF_AlphaSpinBox")
        self.FCFV_SecondZoneOperationField.addWidget(self.FCFV_SZOF_AlphaSpinBox, 0, 3, 1, 1)
        self.FCFV_SZOF_FirstModeRadioButton = QtWidgets.QRadioButton(parent=self.widget1)
        font = QtGui.QFont()
        font.setFamily("Segoe UI Variable Display")
        font.setBold(True)
        font.setItalic(False)
        self.FCFV_SZOF_FirstModeRadioButton.setFont(font)
        self.FCFV_SZOF_FirstModeRadioButton.setStyleSheet("QRadioButton {\n"
"    font: bold;\n"
"}\n"
"\n"
"QRadioButton:hover {\n"
"    color: rgb(255, 185, 115);\n"
"}\n"
"\n"
"QRadioButton:pressed {\n"
"    color: rgb(255, 220, 150);\n"
"}")
        self.FCFV_SZOF_FirstModeRadioButton.setObjectName("FCFV_SZOF_FirstModeRadioButton")
        self.FCFV_SecondZoneOperationField.addWidget(self.FCFV_SZOF_FirstModeRadioButton, 0, 0, 1, 1)
        self.FCFV_SZOF_ZoomInOutLabel = QtWidgets.QLabel(parent=self.widget1)
        font = QtGui.QFont()
        font.setFamily("Segoe UI Variable Display")
        self.FCFV_SZOF_ZoomInOutLabel.setFont(font)
        self.FCFV_SZOF_ZoomInOutLabel.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.FCFV_SZOF_ZoomInOutLabel.setObjectName("FCFV_SZOF_ZoomInOutLabel")
        self.FCFV_SecondZoneOperationField.addWidget(self.FCFV_SZOF_ZoomInOutLabel, 1, 2, 1, 1)
        self.FCFV_SZOF_AlphaLabel = QtWidgets.QLabel(parent=self.widget1)
        font = QtGui.QFont()
        font.setFamily("Segoe UI Variable Display")
        self.FCFV_SZOF_AlphaLabel.setFont(font)
        self.FCFV_SZOF_AlphaLabel.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.FCFV_SZOF_AlphaLabel.setObjectName("FCFV_SZOF_AlphaLabel")
        self.FCFV_SecondZoneOperationField.addWidget(self.FCFV_SZOF_AlphaLabel, 0, 2, 1, 1)
        self.FCFV_SZOF_SecondModeRadioButton = QtWidgets.QRadioButton(parent=self.widget1)
        font = QtGui.QFont()
        font.setFamily("Segoe UI Variable Display")
        font.setBold(True)
        font.setItalic(False)
        self.FCFV_SZOF_SecondModeRadioButton.setFont(font)
        self.FCFV_SZOF_SecondModeRadioButton.setStyleSheet("QRadioButton {\n"
"    font: bold;\n"
"}\n"
"\n"
"QRadioButton:hover {\n"
"    color: rgb(255, 135, 150);\n"
"}\n"
"\n"
"QRadioButton:pressed {\n"
"    color: rgb(255, 100, 185);\n"
"}")
        self.FCFV_SZOF_SecondModeRadioButton.setObjectName("FCFV_SZOF_SecondModeRadioButton")
        self.FCFV_SecondZoneOperationField.addWidget(self.FCFV_SZOF_SecondModeRadioButton, 1, 0, 1, 1)
        self.FCFV_SZOF_RotateSpinBox = QtWidgets.QSpinBox(parent=self.widget1)
        font = QtGui.QFont()
        font.setFamily("Fira Code")
        self.FCFV_SZOF_RotateSpinBox.setFont(font)
        self.FCFV_SZOF_RotateSpinBox.setMaximum(360)
        self.FCFV_SZOF_RotateSpinBox.setObjectName("FCFV_SZOF_RotateSpinBox")
        self.FCFV_SecondZoneOperationField.addWidget(self.FCFV_SZOF_RotateSpinBox, 1, 5, 1, 1)
        self.FCFV_SZOF_RotateLabel = QtWidgets.QLabel(parent=self.widget1)
        font = QtGui.QFont()
        font.setFamily("Segoe UI Variable Display")
        self.FCFV_SZOF_RotateLabel.setFont(font)
        self.FCFV_SZOF_RotateLabel.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.FCFV_SZOF_RotateLabel.setObjectName("FCFV_SZOF_RotateLabel")
        self.FCFV_SecondZoneOperationField.addWidget(self.FCFV_SZOF_RotateLabel, 1, 4, 1, 1)
        self.FCFV_SZOF_LineYAxisOperationSeparator = QtWidgets.QFrame(parent=self.widget1)
        self.FCFV_SZOF_LineYAxisOperationSeparator.setFrameShape(QtWidgets.QFrame.Shape.VLine)
        self.FCFV_SZOF_LineYAxisOperationSeparator.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.FCFV_SZOF_LineYAxisOperationSeparator.setObjectName("FCFV_SZOF_LineYAxisOperationSeparator")
        self.FCFV_SecondZoneOperationField.addWidget(self.FCFV_SZOF_LineYAxisOperationSeparator, 0, 1, 2, 1)
        self.FCFV_SZOF_BetaLabel = QtWidgets.QLabel(parent=self.widget1)
        font = QtGui.QFont()
        font.setFamily("Segoe UI Variable Display")
        self.FCFV_SZOF_BetaLabel.setFont(font)
        self.FCFV_SZOF_BetaLabel.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.FCFV_SZOF_BetaLabel.setObjectName("FCFV_SZOF_BetaLabel")
        self.FCFV_SecondZoneOperationField.addWidget(self.FCFV_SZOF_BetaLabel, 0, 4, 1, 1)
        self.CreationAndUsagePurposes = QtWidgets.QLabel(parent=self.MainFrame)
        self.CreationAndUsagePurposes.setGeometry(QtCore.QRect(820, 20, 400, 15))
        font = QtGui.QFont()
        font.setFamily("Segoe UI Variable Display")
        self.CreationAndUsagePurposes.setFont(font)
        self.CreationAndUsagePurposes.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.CreationAndUsagePurposes.setObjectName("CreationAndUsagePurposes")
        self.OpenSourceReserved = QtWidgets.QLabel(parent=self.MainFrame)
        self.OpenSourceReserved.setGeometry(QtCore.QRect(820, 40, 400, 15))
        font = QtGui.QFont()
        font.setFamily("Segoe UI Variable Display")
        self.OpenSourceReserved.setFont(font)
        self.OpenSourceReserved.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.OpenSourceReserved.setObjectName("OpenSourceReserved")
        self.MyGitHubProfile = QtWidgets.QLabel(parent=self.MainFrame)
        self.MyGitHubProfile.setGeometry(QtCore.QRect(20, 625, 200, 15))
        font = QtGui.QFont()
        font.setFamily("Segoe UI Variable Display")
        self.MyGitHubProfile.setFont(font)
        self.MyGitHubProfile.setObjectName("MyGitHubProfile")
        self.LastModifiedApplicationDate = QtWidgets.QLabel(parent=self.MainFrame)
        self.LastModifiedApplicationDate.setGeometry(QtCore.QRect(20, 640, 200, 15))
        font = QtGui.QFont()
        font.setFamily("Segoe UI Variable Display")
        self.LastModifiedApplicationDate.setFont(font)
        self.LastModifiedApplicationDate.setObjectName("LastModifiedApplicationDate")

        self.retranslateUi(Widget)
        QtCore.QMetaObject.connectSlotsByName(Widget)

    def retranslateUi(self, Widget):
        _translate = QtCore.QCoreApplication.translate
        Widget.setWindowTitle(_translate("Widget", "Fisheye Monitoring System Application"))
        self.MainApplicationTitle.setText(_translate("Widget", "<strong>Fish Eye Monitoring System Application</strong> | <i>Multi-views</i>"))
        self.ImageProcessingButton.setToolTip(_translate("Widget", "<!DOCTYPE html>\n"
"<html>\n"
"<style>\n"
".tooltip {\n"
"  position: relative;\n"
"  display: inline-block;\n"
"  border-bottom: 1px dotted black;\n"
"}\n"
"\n"
".tooltip .tooltiptext {\n"
"  visibility: hidden;\n"
"  width: 120px;\n"
"  background-color: #555;\n"
"  color: #fff;\n"
"  text-align: center;\n"
"  border-radius: 6px;\n"
"  padding: 5px 0;\n"
"  position: absolute;\n"
"  z-index: 1;\n"
"  bottom: 125%;\n"
"  left: 50%;\n"
"  margin-left: -60px;\n"
"  opacity: 0;\n"
"  transition: opacity 0.3s;\n"
"}\n"
"\n"
".tooltip .tooltiptext::after {\n"
"  content: \"\";\n"
"  position: absolute;\n"
"  top: 100%;\n"
"  left: 50%;\n"
"  margin-left: -5px;\n"
"  border-width: 5px;\n"
"  border-style: solid;\n"
"  border-color: #555 transparent transparent transparent;\n"
"}\n"
"\n"
".tooltip:hover .tooltiptext {\n"
"  visibility: visible;\n"
"  opacity: 1;\n"
"}\n"
"</style>\n"
"<body style=\"text-align:center;\">\n"
"\n"
"<h2>Monitoring - Image</h2>\n"
"<p>Getting the image by the normal fisheye camera and process the captured (displayed) image afterwards.</p>\n"
"\n"
"<div class=\"tooltip\">Useful tips:\n"
"  <span class=\"tooltiptext\">Image Processing</span>\n"
"</div>\n"
"\n"
"</body>\n"
"</html>\n"
""))
        self.ImageProcessingButton.setText(_translate("Widget", "Image"))
        self.VideoProcessingButton.setToolTip(_translate("Widget", "<!DOCTYPE html>\n"
"<html>\n"
"<style>\n"
".tooltip {\n"
"  position: relative;\n"
"  display: inline-block;\n"
"  border-bottom: 1px dotted black;\n"
"}\n"
"\n"
".tooltip .tooltiptext {\n"
"  visibility: hidden;\n"
"  width: 120px;\n"
"  background-color: #555;\n"
"  color: #fff;\n"
"  text-align: center;\n"
"  border-radius: 6px;\n"
"  padding: 5px 0;\n"
"  position: absolute;\n"
"  z-index: 1;\n"
"  bottom: 125%;\n"
"  left: 50%;\n"
"  margin-left: -60px;\n"
"  opacity: 0;\n"
"  transition: opacity 0.3s;\n"
"}\n"
"\n"
".tooltip .tooltiptext::after {\n"
"  content: \"\";\n"
"  position: absolute;\n"
"  top: 100%;\n"
"  left: 50%;\n"
"  margin-left: -5px;\n"
"  border-width: 5px;\n"
"  border-style: solid;\n"
"  border-color: #555 transparent transparent transparent;\n"
"}\n"
"\n"
".tooltip:hover .tooltiptext {\n"
"  visibility: visible;\n"
"  opacity: 1;\n"
"}\n"
"</style>\n"
"<body style=\"text-align:center;\">\n"
"\n"
"<h2>Monitoring - Video</h2>\n"
"<p>Getting the video by the normal fisheye camera and process the captured (displayed) video afterwards.</p>\n"
"\n"
"<div class=\"tooltip\">Useful tips:\n"
"  <span class=\"tooltiptext\">Video Processing</span>\n"
"</div>\n"
"\n"
"</body>\n"
"</html>\n"
""))
        self.VideoProcessingButton.setText(_translate("Widget", "Video"))
        self.StreamingButton.setToolTip(_translate("Widget", "<!DOCTYPE html>\n"
"<html>\n"
"<style>\n"
".tooltip {\n"
"  position: relative;\n"
"  display: inline-block;\n"
"  border-bottom: 1px dotted black;\n"
"}\n"
"\n"
".tooltip .tooltiptext {\n"
"  visibility: hidden;\n"
"  width: 120px;\n"
"  background-color: #555;\n"
"  color: #fff;\n"
"  text-align: center;\n"
"  border-radius: 6px;\n"
"  padding: 5px 0;\n"
"  position: absolute;\n"
"  z-index: 1;\n"
"  bottom: 125%;\n"
"  left: 50%;\n"
"  margin-left: -60px;\n"
"  opacity: 0;\n"
"  transition: opacity 0.3s;\n"
"}\n"
"\n"
".tooltip .tooltiptext::after {\n"
"  content: \"\";\n"
"  position: absolute;\n"
"  top: 100%;\n"
"  left: 50%;\n"
"  margin-left: -5px;\n"
"  border-width: 5px;\n"
"  border-style: solid;\n"
"  border-color: #555 transparent transparent transparent;\n"
"}\n"
"\n"
".tooltip:hover .tooltiptext {\n"
"  visibility: visible;\n"
"  opacity: 1;\n"
"}\n"
"</style>\n"
"<body style=\"text-align:center;\">\n"
"\n"
"<h2>Monitoring - Streaming</h2>\n"
"<p>Streaming over the fisheye camera, connected either by Bluetooth or external cable, then process the streaming video while onboard.</p>\n"
"\n"
"<div class=\"tooltip\">Useful tips:\n"
"  <span class=\"tooltiptext\">Streaming Processing Onboard</span>\n"
"</div>\n"
"\n"
"</body>\n"
"</html>\n"
""))
        self.StreamingButton.setText(_translate("Widget", "Streaming"))
        self.RecordingButton.setToolTip(_translate("Widget", "<!DOCTYPE html>\n"
"<html>\n"
"<style>\n"
".tooltip {\n"
"  position: relative;\n"
"  display: inline-block;\n"
"  border-bottom: 1px dotted black;\n"
"}\n"
"\n"
".tooltip .tooltiptext {\n"
"  visibility: hidden;\n"
"  width: 120px;\n"
"  background-color: #555;\n"
"  color: #fff;\n"
"  text-align: center;\n"
"  border-radius: 6px;\n"
"  padding: 5px 0;\n"
"  position: absolute;\n"
"  z-index: 1;\n"
"  bottom: 125%;\n"
"  left: 50%;\n"
"  margin-left: -60px;\n"
"  opacity: 0;\n"
"  transition: opacity 0.3s;\n"
"}\n"
"\n"
".tooltip .tooltiptext::after {\n"
"  content: \"\";\n"
"  position: absolute;\n"
"  top: 100%;\n"
"  left: 50%;\n"
"  margin-left: -5px;\n"
"  border-width: 5px;\n"
"  border-style: solid;\n"
"  border-color: #555 transparent transparent transparent;\n"
"}\n"
"\n"
".tooltip:hover .tooltiptext {\n"
"  visibility: visible;\n"
"  opacity: 1;\n"
"}\n"
"</style>\n"
"<body style=\"text-align:center;\">\n"
"\n"
"<h2>Monitoring - Recording</h2>\n"
"<p>Record using the fisheye camera, connected either by Bluetooth or external cable, then process the recorded video afterwards.</p>\n"
"\n"
"<div class=\"tooltip\">Useful tips:\n"
"  <span class=\"tooltiptext\">Recorded Video Processing</span>\n"
"</div>\n"
"\n"
"</body>\n"
"</html>\n"
""))
        self.RecordingButton.setText(_translate("Widget", "Recording"))
        self.SaveParametersButton.setToolTip(_translate("Widget", "<!DOCTYPE html>\n"
"<html>\n"
"<style>\n"
".tooltip {\n"
"  position: relative;\n"
"  display: inline-block;\n"
"  border-bottom: 1px dotted black;\n"
"}\n"
"\n"
".tooltip .tooltiptext {\n"
"  visibility: hidden;\n"
"  width: 120px;\n"
"  background-color: #555;\n"
"  color: #fff;\n"
"  text-align: center;\n"
"  border-radius: 6px;\n"
"  padding: 5px 0;\n"
"  position: absolute;\n"
"  z-index: 1;\n"
"  bottom: 125%;\n"
"  left: 50%;\n"
"  margin-left: -60px;\n"
"  opacity: 0;\n"
"  transition: opacity 0.3s;\n"
"}\n"
"\n"
".tooltip .tooltiptext::after {\n"
"  content: \"\";\n"
"  position: absolute;\n"
"  top: 100%;\n"
"  left: 50%;\n"
"  margin-left: -5px;\n"
"  border-width: 5px;\n"
"  border-style: solid;\n"
"  border-color: #555 transparent transparent transparent;\n"
"}\n"
"\n"
".tooltip:hover .tooltiptext {\n"
"  visibility: visible;\n"
"  opacity: 1;\n"
"}\n"
"</style>\n"
"<body style=\"text-align:center;\">\n"
"\n"
"<h2>Monitoring - Save Parameters</h2>\n"
"<p>Use to save some custom existing (or built-in) parameters for the fisheye monitoring camera system setup after some configurations to be done before/afterhand.</p>\n"
"\n"
"<div class=\"tooltip\">Useful tips:\n"
"  <span class=\"tooltiptext\">Saving Existing Parameters</span>\n"
"</div>\n"
"\n"
"</body>\n"
"</html>\n"
""))
        self.SaveParametersButton.setText(_translate("Widget", "Save Parameters"))
        self.NormalFisheyeCameraFieldView_FirstZoneLabel.setText(_translate("Widget", "Fisheye Camera Field View <strong>(Zone 1)</strong>"))
        self.NormalFisheyeCameraFieldView_SecondZoneLabel.setText(_translate("Widget", "Fisheye Camera Field View <strong>(Zone 2)</strong>"))
        self.NormalFisheyeCameraFieldView_OriginalLabel.setText(_translate("Widget", "Normal Fisheye Camera Field View <strong>(Original)</strong>"))
        self.FCFV_OOF_ViewSecondZoneRadioButton.setToolTip(_translate("Widget", "<!DOCTYPE html>\n"
"<html>\n"
"<style>\n"
".tooltip {\n"
"  position: relative;\n"
"  display: inline-block;\n"
"  border-bottom: 1px dotted black;\n"
"}\n"
"\n"
".tooltip .tooltiptext {\n"
"  visibility: hidden;\n"
"  width: 120px;\n"
"  background-color: #555;\n"
"  color: #fff;\n"
"  text-align: center;\n"
"  border-radius: 6px;\n"
"  padding: 5px 0;\n"
"  position: absolute;\n"
"  z-index: 1;\n"
"  bottom: 125%;\n"
"  left: 50%;\n"
"  margin-left: -60px;\n"
"  opacity: 0;\n"
"  transition: opacity 0.3s;\n"
"}\n"
"\n"
".tooltip .tooltiptext::after {\n"
"  content: \"\";\n"
"  position: absolute;\n"
"  top: 100%;\n"
"  left: 50%;\n"
"  margin-left: -5px;\n"
"  border-width: 5px;\n"
"  border-style: solid;\n"
"  border-color: #555 transparent transparent transparent;\n"
"}\n"
"\n"
".tooltip:hover .tooltiptext {\n"
"  visibility: visible;\n"
"  opacity: 1;\n"
"}\n"
"</style>\n"
"<body style=\"text-align:center;\">\n"
"\n"
"<h2>Radio Box - Camera Zone 2</h2>\n"
"<p>Process the captured parameters by the fisheye\'s camera lens into the Camera Zone 2 graphical view.</p>\n"
"\n"
"<div class=\"tooltip\">Useful tips:\n"
"  <span class=\"tooltiptext\">Camera Zone 2 Processing</span>\n"
"</div>\n"
"\n"
"</body>\n"
"</html>\n"
""))
        self.FCFV_OOF_ViewSecondZoneRadioButton.setText(_translate("Widget", "View (Zone 2)"))
        self.FCFV_OOF_RotateLabel.setToolTip(_translate("Widget", "<!DOCTYPE html>\n"
"<html>\n"
"<style>\n"
".tooltip {\n"
"  position: relative;\n"
"  display: inline-block;\n"
"  border-bottom: 1px dotted black;\n"
"}\n"
"\n"
".tooltip .tooltiptext {\n"
"  visibility: hidden;\n"
"  width: 120px;\n"
"  background-color: #555;\n"
"  color: #fff;\n"
"  text-align: center;\n"
"  border-radius: 6px;\n"
"  padding: 5px 0;\n"
"  position: absolute;\n"
"  z-index: 1;\n"
"  bottom: 125%;\n"
"  left: 50%;\n"
"  margin-left: -60px;\n"
"  opacity: 0;\n"
"  transition: opacity 0.3s;\n"
"}\n"
"\n"
".tooltip .tooltiptext::after {\n"
"  content: \"\";\n"
"  position: absolute;\n"
"  top: 100%;\n"
"  left: 50%;\n"
"  margin-left: -5px;\n"
"  border-width: 5px;\n"
"  border-style: solid;\n"
"  border-color: #555 transparent transparent transparent;\n"
"}\n"
"\n"
".tooltip:hover .tooltiptext {\n"
"  visibility: visible;\n"
"  opacity: 1;\n"
"}\n"
"</style>\n"
"<body style=\"text-align:center;\">\n"
"\n"
"<h2>Spin Box - Degrees</h2>\n"
"<p>Drag up/down the spin box (or capture exact degrees value), going from 0 up to 360.</p>\n"
"\n"
"<div class=\"tooltip\">Useful tips:\n"
"  <span class=\"tooltiptext\">0-360 Only</span>\n"
"</div>\n"
"\n"
"</body>\n"
"</html>\n"
""))
        self.FCFV_OOF_RotateLabel.setText(_translate("Widget", "Rotate (degrees)"))
        self.FCFV_OOF_RotateSpinBox.setToolTip(_translate("Widget", "<!DOCTYPE html>\n"
"<html>\n"
"<style>\n"
".tooltip {\n"
"  position: relative;\n"
"  display: inline-block;\n"
"  border-bottom: 1px dotted black;\n"
"}\n"
"\n"
".tooltip .tooltiptext {\n"
"  visibility: hidden;\n"
"  width: 120px;\n"
"  background-color: #555;\n"
"  color: #fff;\n"
"  text-align: center;\n"
"  border-radius: 6px;\n"
"  padding: 5px 0;\n"
"  position: absolute;\n"
"  z-index: 1;\n"
"  bottom: 125%;\n"
"  left: 50%;\n"
"  margin-left: -60px;\n"
"  opacity: 0;\n"
"  transition: opacity 0.3s;\n"
"}\n"
"\n"
".tooltip .tooltiptext::after {\n"
"  content: \"\";\n"
"  position: absolute;\n"
"  top: 100%;\n"
"  left: 50%;\n"
"  margin-left: -5px;\n"
"  border-width: 5px;\n"
"  border-style: solid;\n"
"  border-color: #555 transparent transparent transparent;\n"
"}\n"
"\n"
".tooltip:hover .tooltiptext {\n"
"  visibility: visible;\n"
"  opacity: 1;\n"
"}\n"
"</style>\n"
"<body style=\"text-align:center;\">\n"
"\n"
"<h2>Spin Box - Degrees</h2>\n"
"<p>Drag up/down the spin box (or capture exact degrees value), going from 0 up to 360.</p>\n"
"\n"
"<div class=\"tooltip\">Useful tips:\n"
"  <span class=\"tooltiptext\">0-360 Only</span>\n"
"</div>\n"
"\n"
"</body>\n"
"</html>\n"
""))
        self.FCFV_OOF_ViewFirstZoneRadioButton.setToolTip(_translate("Widget", "<!DOCTYPE html>\n"
"<html>\n"
"<style>\n"
".tooltip {\n"
"  position: relative;\n"
"  display: inline-block;\n"
"  border-bottom: 1px dotted black;\n"
"}\n"
"\n"
".tooltip .tooltiptext {\n"
"  visibility: hidden;\n"
"  width: 120px;\n"
"  background-color: #555;\n"
"  color: #fff;\n"
"  text-align: center;\n"
"  border-radius: 6px;\n"
"  padding: 5px 0;\n"
"  position: absolute;\n"
"  z-index: 1;\n"
"  bottom: 125%;\n"
"  left: 50%;\n"
"  margin-left: -60px;\n"
"  opacity: 0;\n"
"  transition: opacity 0.3s;\n"
"}\n"
"\n"
".tooltip .tooltiptext::after {\n"
"  content: \"\";\n"
"  position: absolute;\n"
"  top: 100%;\n"
"  left: 50%;\n"
"  margin-left: -5px;\n"
"  border-width: 5px;\n"
"  border-style: solid;\n"
"  border-color: #555 transparent transparent transparent;\n"
"}\n"
"\n"
".tooltip:hover .tooltiptext {\n"
"  visibility: visible;\n"
"  opacity: 1;\n"
"}\n"
"</style>\n"
"<body style=\"text-align:center;\">\n"
"\n"
"<h2>Radio Box - Camera Zone 1</h2>\n"
"<p>Process the captured parameters by the fisheye\'s camera lens into the Camera Zone 1 graphical view.</p>\n"
"\n"
"<div class=\"tooltip\">Useful tips:\n"
"  <span class=\"tooltiptext\">Camera Zone 1 Processing</span>\n"
"</div>\n"
"\n"
"</body>\n"
"</html>\n"
""))
        self.FCFV_OOF_ViewFirstZoneRadioButton.setText(_translate("Widget", "View (Zone 1)"))
        self.PlateDetectionFirstZoneLabel.setText(_translate("Widget", "Plate Detection <strong>(Zone 1)</strong>"))
        self.PlateDetectionOriginalLabel.setText(_translate("Widget", "Plate Detection <strong>(Original)</strong>"))
        self.PlateDetectionSecondZoneLabel.setText(_translate("Widget", "Plate Detection <strong>(Zone 2)</strong>"))
        self.CountDetectedPDZ01Label.setToolTip(_translate("Widget", "<!DOCTYPE html>\n"
"<html>\n"
"<style>\n"
".tooltip {\n"
"  position: relative;\n"
"  display: inline-block;\n"
"  border-bottom: 1px dotted black;\n"
"}\n"
"\n"
".tooltip .tooltiptext {\n"
"  visibility: hidden;\n"
"  width: 120px;\n"
"  background-color: #555;\n"
"  color: #fff;\n"
"  text-align: center;\n"
"  border-radius: 6px;\n"
"  padding: 5px 0;\n"
"  position: absolute;\n"
"  z-index: 1;\n"
"  bottom: 125%;\n"
"  left: 50%;\n"
"  margin-left: -60px;\n"
"  opacity: 0;\n"
"  transition: opacity 0.3s;\n"
"}\n"
"\n"
".tooltip .tooltiptext::after {\n"
"  content: \"\";\n"
"  position: absolute;\n"
"  top: 100%;\n"
"  left: 50%;\n"
"  margin-left: -5px;\n"
"  border-width: 5px;\n"
"  border-style: solid;\n"
"  border-color: #555 transparent transparent transparent;\n"
"}\n"
"\n"
".tooltip:hover .tooltiptext {\n"
"  visibility: visible;\n"
"  opacity: 1;\n"
"}\n"
"</style>\n"
"<body style=\"text-align:center;\">\n"
"\n"
"<h2>Plate Detection - Show Count Detection (Zone 1)</h2>\n"
"<p>Use for displaying the detected count plate based on the modifications in the camera field trick above.</p>\n"
"\n"
"<div class=\"tooltip\">Useful tips:\n"
"  <span class=\"tooltiptext\">Given Plate Detection Count Detection</span>\n"
"</div>\n"
"\n"
"</body>\n"
"</html>\n"
""))
        self.CountDetectedPDZ01Label.setText(_translate("Widget", "Count Detected:"))
        self.CountDetectedPDZ01LineEdit.setToolTip(_translate("Widget", "<!DOCTYPE html>\n"
"<html>\n"
"<style>\n"
".tooltip {\n"
"  position: relative;\n"
"  display: inline-block;\n"
"  border-bottom: 1px dotted black;\n"
"}\n"
"\n"
".tooltip .tooltiptext {\n"
"  visibility: hidden;\n"
"  width: 120px;\n"
"  background-color: #555;\n"
"  color: #fff;\n"
"  text-align: center;\n"
"  border-radius: 6px;\n"
"  padding: 5px 0;\n"
"  position: absolute;\n"
"  z-index: 1;\n"
"  bottom: 125%;\n"
"  left: 50%;\n"
"  margin-left: -60px;\n"
"  opacity: 0;\n"
"  transition: opacity 0.3s;\n"
"}\n"
"\n"
".tooltip .tooltiptext::after {\n"
"  content: \"\";\n"
"  position: absolute;\n"
"  top: 100%;\n"
"  left: 50%;\n"
"  margin-left: -5px;\n"
"  border-width: 5px;\n"
"  border-style: solid;\n"
"  border-color: #555 transparent transparent transparent;\n"
"}\n"
"\n"
".tooltip:hover .tooltiptext {\n"
"  visibility: visible;\n"
"  opacity: 1;\n"
"}\n"
"</style>\n"
"<body style=\"text-align:center;\">\n"
"\n"
"<h2>Plate Detection - Show Count Detection (Zone 1)</h2>\n"
"<p>Use for displaying the detected count plate based on the modifications in the camera field trick above.</p>\n"
"\n"
"<div class=\"tooltip\">Useful tips:\n"
"  <span class=\"tooltiptext\">Given Plate Detection Count Detection</span>\n"
"</div>\n"
"\n"
"</body>\n"
"</html>\n"
""))
        self.PredictionPDZ02Label_2.setToolTip(_translate("Widget", "<!DOCTYPE html>\n"
"<html>\n"
"<style>\n"
".tooltip {\n"
"  position: relative;\n"
"  display: inline-block;\n"
"  border-bottom: 1px dotted black;\n"
"}\n"
"\n"
".tooltip .tooltiptext {\n"
"  visibility: hidden;\n"
"  width: 120px;\n"
"  background-color: #555;\n"
"  color: #fff;\n"
"  text-align: center;\n"
"  border-radius: 6px;\n"
"  padding: 5px 0;\n"
"  position: absolute;\n"
"  z-index: 1;\n"
"  bottom: 125%;\n"
"  left: 50%;\n"
"  margin-left: -60px;\n"
"  opacity: 0;\n"
"  transition: opacity 0.3s;\n"
"}\n"
"\n"
".tooltip .tooltiptext::after {\n"
"  content: \"\";\n"
"  position: absolute;\n"
"  top: 100%;\n"
"  left: 50%;\n"
"  margin-left: -5px;\n"
"  border-width: 5px;\n"
"  border-style: solid;\n"
"  border-color: #555 transparent transparent transparent;\n"
"}\n"
"\n"
".tooltip:hover .tooltiptext {\n"
"  visibility: visible;\n"
"  opacity: 1;\n"
"}\n"
"</style>\n"
"<body style=\"text-align:center;\">\n"
"\n"
"<h2>Plate Detection - Show Prediction (Zone 1)</h2>\n"
"<p>Use for displaying the predicted plate based on the modifications in the camera field trick above.</p>\n"
"\n"
"<div class=\"tooltip\">Useful tips:\n"
"  <span class=\"tooltiptext\">Given Plate Detection Prediction</span>\n"
"</div>\n"
"\n"
"</body>\n"
"</html>\n"
""))
        self.PredictionPDZ02Label_2.setText(_translate("Widget", "Prediction:"))
        self.PredictionPDZ01LineEdit.setToolTip(_translate("Widget", "<!DOCTYPE html>\n"
"<html>\n"
"<style>\n"
".tooltip {\n"
"  position: relative;\n"
"  display: inline-block;\n"
"  border-bottom: 1px dotted black;\n"
"}\n"
"\n"
".tooltip .tooltiptext {\n"
"  visibility: hidden;\n"
"  width: 120px;\n"
"  background-color: #555;\n"
"  color: #fff;\n"
"  text-align: center;\n"
"  border-radius: 6px;\n"
"  padding: 5px 0;\n"
"  position: absolute;\n"
"  z-index: 1;\n"
"  bottom: 125%;\n"
"  left: 50%;\n"
"  margin-left: -60px;\n"
"  opacity: 0;\n"
"  transition: opacity 0.3s;\n"
"}\n"
"\n"
".tooltip .tooltiptext::after {\n"
"  content: \"\";\n"
"  position: absolute;\n"
"  top: 100%;\n"
"  left: 50%;\n"
"  margin-left: -5px;\n"
"  border-width: 5px;\n"
"  border-style: solid;\n"
"  border-color: #555 transparent transparent transparent;\n"
"}\n"
"\n"
".tooltip:hover .tooltiptext {\n"
"  visibility: visible;\n"
"  opacity: 1;\n"
"}\n"
"</style>\n"
"<body style=\"text-align:center;\">\n"
"\n"
"<h2>Plate Detection - Show Prediction (Zone 1)</h2>\n"
"<p>Use for displaying the predicted plate based on the modifications in the camera field trick above.</p>\n"
"\n"
"<div class=\"tooltip\">Useful tips:\n"
"  <span class=\"tooltiptext\">Given Plate Detection Prediction</span>\n"
"</div>\n"
"\n"
"</body>\n"
"</html>\n"
""))
        self.SaveButtonPDZ01.setToolTip(_translate("Widget", "<!DOCTYPE html>\n"
"<html>\n"
"<style>\n"
".tooltip {\n"
"  position: relative;\n"
"  display: inline-block;\n"
"  border-bottom: 1px dotted black;\n"
"}\n"
"\n"
".tooltip .tooltiptext {\n"
"  visibility: hidden;\n"
"  width: 120px;\n"
"  background-color: #555;\n"
"  color: #fff;\n"
"  text-align: center;\n"
"  border-radius: 6px;\n"
"  padding: 5px 0;\n"
"  position: absolute;\n"
"  z-index: 1;\n"
"  bottom: 125%;\n"
"  left: 50%;\n"
"  margin-left: -60px;\n"
"  opacity: 0;\n"
"  transition: opacity 0.3s;\n"
"}\n"
"\n"
".tooltip .tooltiptext::after {\n"
"  content: \"\";\n"
"  position: absolute;\n"
"  top: 100%;\n"
"  left: 50%;\n"
"  margin-left: -5px;\n"
"  border-width: 5px;\n"
"  border-style: solid;\n"
"  border-color: #555 transparent transparent transparent;\n"
"}\n"
"\n"
".tooltip:hover .tooltiptext {\n"
"  visibility: visible;\n"
"  opacity: 1;\n"
"}\n"
"</style>\n"
"<body style=\"text-align:center;\">\n"
"\n"
"<h2>Plate Detection - Save Result (Zone 1)</h2>\n"
"<p>Use for saving the processed results based on the count detections and predictions onto some file/data memory for further usages.</p>\n"
"\n"
"<div class=\"tooltip\">Useful tips:\n"
"  <span class=\"tooltiptext\">Saving Plate Detection Results</span>\n"
"</div>\n"
"\n"
"</body>\n"
"</html>\n"
""))
        self.SaveButtonPDZ01.setText(_translate("Widget", "Save"))
        self.CountDetectedPD02Label.setToolTip(_translate("Widget", "<!DOCTYPE html>\n"
"<html>\n"
"<style>\n"
".tooltip {\n"
"  position: relative;\n"
"  display: inline-block;\n"
"  border-bottom: 1px dotted black;\n"
"}\n"
"\n"
".tooltip .tooltiptext {\n"
"  visibility: hidden;\n"
"  width: 120px;\n"
"  background-color: #555;\n"
"  color: #fff;\n"
"  text-align: center;\n"
"  border-radius: 6px;\n"
"  padding: 5px 0;\n"
"  position: absolute;\n"
"  z-index: 1;\n"
"  bottom: 125%;\n"
"  left: 50%;\n"
"  margin-left: -60px;\n"
"  opacity: 0;\n"
"  transition: opacity 0.3s;\n"
"}\n"
"\n"
".tooltip .tooltiptext::after {\n"
"  content: \"\";\n"
"  position: absolute;\n"
"  top: 100%;\n"
"  left: 50%;\n"
"  margin-left: -5px;\n"
"  border-width: 5px;\n"
"  border-style: solid;\n"
"  border-color: #555 transparent transparent transparent;\n"
"}\n"
"\n"
".tooltip:hover .tooltiptext {\n"
"  visibility: visible;\n"
"  opacity: 1;\n"
"}\n"
"</style>\n"
"<body style=\"text-align:center;\">\n"
"\n"
"<h2>Plate Detection - Show Count Detection (Zone 2)</h2>\n"
"<p>Use for displaying the detected count plate based on the modifications in the camera field trick above.</p>\n"
"\n"
"<div class=\"tooltip\">Useful tips:\n"
"  <span class=\"tooltiptext\">Given Plate Detection Count Detection</span>\n"
"</div>\n"
"\n"
"</body>\n"
"</html>\n"
""))
        self.CountDetectedPD02Label.setText(_translate("Widget", "Count Detected:"))
        self.CountDetectedPDZ02LineEdit.setToolTip(_translate("Widget", "<!DOCTYPE html>\n"
"<html>\n"
"<style>\n"
".tooltip {\n"
"  position: relative;\n"
"  display: inline-block;\n"
"  border-bottom: 1px dotted black;\n"
"}\n"
"\n"
".tooltip .tooltiptext {\n"
"  visibility: hidden;\n"
"  width: 120px;\n"
"  background-color: #555;\n"
"  color: #fff;\n"
"  text-align: center;\n"
"  border-radius: 6px;\n"
"  padding: 5px 0;\n"
"  position: absolute;\n"
"  z-index: 1;\n"
"  bottom: 125%;\n"
"  left: 50%;\n"
"  margin-left: -60px;\n"
"  opacity: 0;\n"
"  transition: opacity 0.3s;\n"
"}\n"
"\n"
".tooltip .tooltiptext::after {\n"
"  content: \"\";\n"
"  position: absolute;\n"
"  top: 100%;\n"
"  left: 50%;\n"
"  margin-left: -5px;\n"
"  border-width: 5px;\n"
"  border-style: solid;\n"
"  border-color: #555 transparent transparent transparent;\n"
"}\n"
"\n"
".tooltip:hover .tooltiptext {\n"
"  visibility: visible;\n"
"  opacity: 1;\n"
"}\n"
"</style>\n"
"<body style=\"text-align:center;\">\n"
"\n"
"<h2>Plate Detection - Show Count Detection (Zone 2)</h2>\n"
"<p>Use for displaying the detected count plate based on the modifications in the camera field trick above.</p>\n"
"\n"
"<div class=\"tooltip\">Useful tips:\n"
"  <span class=\"tooltiptext\">Given Plate Detection Count Detection</span>\n"
"</div>\n"
"\n"
"</body>\n"
"</html>\n"
""))
        self.PredictionPDZ02Label.setToolTip(_translate("Widget", "<!DOCTYPE html>\n"
"<html>\n"
"<style>\n"
".tooltip {\n"
"  position: relative;\n"
"  display: inline-block;\n"
"  border-bottom: 1px dotted black;\n"
"}\n"
"\n"
".tooltip .tooltiptext {\n"
"  visibility: hidden;\n"
"  width: 120px;\n"
"  background-color: #555;\n"
"  color: #fff;\n"
"  text-align: center;\n"
"  border-radius: 6px;\n"
"  padding: 5px 0;\n"
"  position: absolute;\n"
"  z-index: 1;\n"
"  bottom: 125%;\n"
"  left: 50%;\n"
"  margin-left: -60px;\n"
"  opacity: 0;\n"
"  transition: opacity 0.3s;\n"
"}\n"
"\n"
".tooltip .tooltiptext::after {\n"
"  content: \"\";\n"
"  position: absolute;\n"
"  top: 100%;\n"
"  left: 50%;\n"
"  margin-left: -5px;\n"
"  border-width: 5px;\n"
"  border-style: solid;\n"
"  border-color: #555 transparent transparent transparent;\n"
"}\n"
"\n"
".tooltip:hover .tooltiptext {\n"
"  visibility: visible;\n"
"  opacity: 1;\n"
"}\n"
"</style>\n"
"<body style=\"text-align:center;\">\n"
"\n"
"<h2>Plate Detection - Show Prediction (Zone 2)</h2>\n"
"<p>Use for displaying the predicted plate based on the modifications in the camera field trick above.</p>\n"
"\n"
"<div class=\"tooltip\">Useful tips:\n"
"  <span class=\"tooltiptext\">Given Plate Detection Prediction</span>\n"
"</div>\n"
"\n"
"</body>\n"
"</html>\n"
""))
        self.PredictionPDZ02Label.setText(_translate("Widget", "Prediction:"))
        self.PredictionPDZ02LineEdit.setToolTip(_translate("Widget", "<!DOCTYPE html>\n"
"<html>\n"
"<style>\n"
".tooltip {\n"
"  position: relative;\n"
"  display: inline-block;\n"
"  border-bottom: 1px dotted black;\n"
"}\n"
"\n"
".tooltip .tooltiptext {\n"
"  visibility: hidden;\n"
"  width: 120px;\n"
"  background-color: #555;\n"
"  color: #fff;\n"
"  text-align: center;\n"
"  border-radius: 6px;\n"
"  padding: 5px 0;\n"
"  position: absolute;\n"
"  z-index: 1;\n"
"  bottom: 125%;\n"
"  left: 50%;\n"
"  margin-left: -60px;\n"
"  opacity: 0;\n"
"  transition: opacity 0.3s;\n"
"}\n"
"\n"
".tooltip .tooltiptext::after {\n"
"  content: \"\";\n"
"  position: absolute;\n"
"  top: 100%;\n"
"  left: 50%;\n"
"  margin-left: -5px;\n"
"  border-width: 5px;\n"
"  border-style: solid;\n"
"  border-color: #555 transparent transparent transparent;\n"
"}\n"
"\n"
".tooltip:hover .tooltiptext {\n"
"  visibility: visible;\n"
"  opacity: 1;\n"
"}\n"
"</style>\n"
"<body style=\"text-align:center;\">\n"
"\n"
"<h2>Plate Detection - Show Prediction (Zone 2)</h2>\n"
"<p>Use for displaying the predicted plate based on the modifications in the camera field trick above.</p>\n"
"\n"
"<div class=\"tooltip\">Useful tips:\n"
"  <span class=\"tooltiptext\">Given Plate Detection Prediction</span>\n"
"</div>\n"
"\n"
"</body>\n"
"</html>\n"
""))
        self.SaveButtonPDZ02.setToolTip(_translate("Widget", "<!DOCTYPE html>\n"
"<html>\n"
"<style>\n"
".tooltip {\n"
"  position: relative;\n"
"  display: inline-block;\n"
"  border-bottom: 1px dotted black;\n"
"}\n"
"\n"
".tooltip .tooltiptext {\n"
"  visibility: hidden;\n"
"  width: 120px;\n"
"  background-color: #555;\n"
"  color: #fff;\n"
"  text-align: center;\n"
"  border-radius: 6px;\n"
"  padding: 5px 0;\n"
"  position: absolute;\n"
"  z-index: 1;\n"
"  bottom: 125%;\n"
"  left: 50%;\n"
"  margin-left: -60px;\n"
"  opacity: 0;\n"
"  transition: opacity 0.3s;\n"
"}\n"
"\n"
".tooltip .tooltiptext::after {\n"
"  content: \"\";\n"
"  position: absolute;\n"
"  top: 100%;\n"
"  left: 50%;\n"
"  margin-left: -5px;\n"
"  border-width: 5px;\n"
"  border-style: solid;\n"
"  border-color: #555 transparent transparent transparent;\n"
"}\n"
"\n"
".tooltip:hover .tooltiptext {\n"
"  visibility: visible;\n"
"  opacity: 1;\n"
"}\n"
"</style>\n"
"<body style=\"text-align:center;\">\n"
"\n"
"<h2>Plate Detection - Save Result (Zone 2)</h2>\n"
"<p>Use for saving the processed results based on the count detections and predictions onto some file/data memory for further usages.</p>\n"
"\n"
"<div class=\"tooltip\">Useful tips:\n"
"  <span class=\"tooltiptext\">Saving Plate Detection Results</span>\n"
"</div>\n"
"\n"
"</body>\n"
"</html>\n"
""))
        self.SaveButtonPDZ02.setText(_translate("Widget", "Save"))
        self.CountDetectedPDOLabel.setToolTip(_translate("Widget", "<!DOCTYPE html>\n"
"<html>\n"
"<style>\n"
".tooltip {\n"
"  position: relative;\n"
"  display: inline-block;\n"
"  border-bottom: 1px dotted black;\n"
"}\n"
"\n"
".tooltip .tooltiptext {\n"
"  visibility: hidden;\n"
"  width: 120px;\n"
"  background-color: #555;\n"
"  color: #fff;\n"
"  text-align: center;\n"
"  border-radius: 6px;\n"
"  padding: 5px 0;\n"
"  position: absolute;\n"
"  z-index: 1;\n"
"  bottom: 125%;\n"
"  left: 50%;\n"
"  margin-left: -60px;\n"
"  opacity: 0;\n"
"  transition: opacity 0.3s;\n"
"}\n"
"\n"
".tooltip .tooltiptext::after {\n"
"  content: \"\";\n"
"  position: absolute;\n"
"  top: 100%;\n"
"  left: 50%;\n"
"  margin-left: -5px;\n"
"  border-width: 5px;\n"
"  border-style: solid;\n"
"  border-color: #555 transparent transparent transparent;\n"
"}\n"
"\n"
".tooltip:hover .tooltiptext {\n"
"  visibility: visible;\n"
"  opacity: 1;\n"
"}\n"
"</style>\n"
"<body style=\"text-align:center;\">\n"
"\n"
"<h2>Plate Detection - Show Count Detection (Original)</h2>\n"
"<p>Use for displaying the detected count plate based on the modifications in the camera field trick above.</p>\n"
"\n"
"<div class=\"tooltip\">Useful tips:\n"
"  <span class=\"tooltiptext\">Given Plate Detection Count Detection</span>\n"
"</div>\n"
"\n"
"</body>\n"
"</html>\n"
""))
        self.CountDetectedPDOLabel.setText(_translate("Widget", "Count Detected:"))
        self.CountDetectedPDOLineEdit.setToolTip(_translate("Widget", "<!DOCTYPE html>\n"
"<html>\n"
"<style>\n"
".tooltip {\n"
"  position: relative;\n"
"  display: inline-block;\n"
"  border-bottom: 1px dotted black;\n"
"}\n"
"\n"
".tooltip .tooltiptext {\n"
"  visibility: hidden;\n"
"  width: 120px;\n"
"  background-color: #555;\n"
"  color: #fff;\n"
"  text-align: center;\n"
"  border-radius: 6px;\n"
"  padding: 5px 0;\n"
"  position: absolute;\n"
"  z-index: 1;\n"
"  bottom: 125%;\n"
"  left: 50%;\n"
"  margin-left: -60px;\n"
"  opacity: 0;\n"
"  transition: opacity 0.3s;\n"
"}\n"
"\n"
".tooltip .tooltiptext::after {\n"
"  content: \"\";\n"
"  position: absolute;\n"
"  top: 100%;\n"
"  left: 50%;\n"
"  margin-left: -5px;\n"
"  border-width: 5px;\n"
"  border-style: solid;\n"
"  border-color: #555 transparent transparent transparent;\n"
"}\n"
"\n"
".tooltip:hover .tooltiptext {\n"
"  visibility: visible;\n"
"  opacity: 1;\n"
"}\n"
"</style>\n"
"<body style=\"text-align:center;\">\n"
"\n"
"<h2>Plate Detection - Show Count Detection (Original)</h2>\n"
"<p>Use for displaying the detected count plate based on the modifications in the camera field trick above.</p>\n"
"\n"
"<div class=\"tooltip\">Useful tips:\n"
"  <span class=\"tooltiptext\">Given Plate Detection Count Detection</span>\n"
"</div>\n"
"\n"
"</body>\n"
"</html>\n"
""))
        self.PredictionPDOLabel.setToolTip(_translate("Widget", "<!DOCTYPE html>\n"
"<html>\n"
"<style>\n"
".tooltip {\n"
"  position: relative;\n"
"  display: inline-block;\n"
"  border-bottom: 1px dotted black;\n"
"}\n"
"\n"
".tooltip .tooltiptext {\n"
"  visibility: hidden;\n"
"  width: 120px;\n"
"  background-color: #555;\n"
"  color: #fff;\n"
"  text-align: center;\n"
"  border-radius: 6px;\n"
"  padding: 5px 0;\n"
"  position: absolute;\n"
"  z-index: 1;\n"
"  bottom: 125%;\n"
"  left: 50%;\n"
"  margin-left: -60px;\n"
"  opacity: 0;\n"
"  transition: opacity 0.3s;\n"
"}\n"
"\n"
".tooltip .tooltiptext::after {\n"
"  content: \"\";\n"
"  position: absolute;\n"
"  top: 100%;\n"
"  left: 50%;\n"
"  margin-left: -5px;\n"
"  border-width: 5px;\n"
"  border-style: solid;\n"
"  border-color: #555 transparent transparent transparent;\n"
"}\n"
"\n"
".tooltip:hover .tooltiptext {\n"
"  visibility: visible;\n"
"  opacity: 1;\n"
"}\n"
"</style>\n"
"<body style=\"text-align:center;\">\n"
"\n"
"<h2>Plate Detection - Show Prediction (Original)</h2>\n"
"<p>Use for displaying the predicted plate based on the modifications in the camera field trick above.</p>\n"
"\n"
"<div class=\"tooltip\">Useful tips:\n"
"  <span class=\"tooltiptext\">Given Plate Detection Prediction</span>\n"
"</div>\n"
"\n"
"</body>\n"
"</html>\n"
""))
        self.PredictionPDOLabel.setText(_translate("Widget", "Prediction:"))
        self.PredictionPDOLineEdit.setToolTip(_translate("Widget", "<!DOCTYPE html>\n"
"<html>\n"
"<style>\n"
".tooltip {\n"
"  position: relative;\n"
"  display: inline-block;\n"
"  border-bottom: 1px dotted black;\n"
"}\n"
"\n"
".tooltip .tooltiptext {\n"
"  visibility: hidden;\n"
"  width: 120px;\n"
"  background-color: #555;\n"
"  color: #fff;\n"
"  text-align: center;\n"
"  border-radius: 6px;\n"
"  padding: 5px 0;\n"
"  position: absolute;\n"
"  z-index: 1;\n"
"  bottom: 125%;\n"
"  left: 50%;\n"
"  margin-left: -60px;\n"
"  opacity: 0;\n"
"  transition: opacity 0.3s;\n"
"}\n"
"\n"
".tooltip .tooltiptext::after {\n"
"  content: \"\";\n"
"  position: absolute;\n"
"  top: 100%;\n"
"  left: 50%;\n"
"  margin-left: -5px;\n"
"  border-width: 5px;\n"
"  border-style: solid;\n"
"  border-color: #555 transparent transparent transparent;\n"
"}\n"
"\n"
".tooltip:hover .tooltiptext {\n"
"  visibility: visible;\n"
"  opacity: 1;\n"
"}\n"
"</style>\n"
"<body style=\"text-align:center;\">\n"
"\n"
"<h2>Plate Detection - Show Prediction (Original)</h2>\n"
"<p>Use for displaying the predicted plate based on the modifications in the camera field trick above.</p>\n"
"\n"
"<div class=\"tooltip\">Useful tips:\n"
"  <span class=\"tooltiptext\">Given Plate Detection Prediction</span>\n"
"</div>\n"
"\n"
"</body>\n"
"</html>\n"
""))
        self.ShowResultButtonPDO.setToolTip(_translate("Widget", "<!DOCTYPE html>\n"
"<html>\n"
"<style>\n"
".tooltip {\n"
"  position: relative;\n"
"  display: inline-block;\n"
"  border-bottom: 1px dotted black;\n"
"}\n"
"\n"
".tooltip .tooltiptext {\n"
"  visibility: hidden;\n"
"  width: 120px;\n"
"  background-color: #555;\n"
"  color: #fff;\n"
"  text-align: center;\n"
"  border-radius: 6px;\n"
"  padding: 5px 0;\n"
"  position: absolute;\n"
"  z-index: 1;\n"
"  bottom: 125%;\n"
"  left: 50%;\n"
"  margin-left: -60px;\n"
"  opacity: 0;\n"
"  transition: opacity 0.3s;\n"
"}\n"
"\n"
".tooltip .tooltiptext::after {\n"
"  content: \"\";\n"
"  position: absolute;\n"
"  top: 100%;\n"
"  left: 50%;\n"
"  margin-left: -5px;\n"
"  border-width: 5px;\n"
"  border-style: solid;\n"
"  border-color: #555 transparent transparent transparent;\n"
"}\n"
"\n"
".tooltip:hover .tooltiptext {\n"
"  visibility: visible;\n"
"  opacity: 1;\n"
"}\n"
"</style>\n"
"<body style=\"text-align:center;\">\n"
"\n"
"<h2>Plate Detection - Show Result (Original)</h2>\n"
"<p>Use for displaying the given result based on the count detections and predictions.</p>\n"
"\n"
"<div class=\"tooltip\">Useful tips:\n"
"  <span class=\"tooltiptext\">Given Plate Detection Result</span>\n"
"</div>\n"
"\n"
"</body>\n"
"</html>\n"
""))
        self.ShowResultButtonPDO.setText(_translate("Widget", "Result"))
        self.ButtonID01.setToolTip(_translate("Widget", "<!DOCTYPE html>\n"
"<html>\n"
"<style>\n"
".tooltip {\n"
"  position: relative;\n"
"  display: inline-block;\n"
"  border-bottom: 1px dotted black;\n"
"}\n"
"\n"
".tooltip .tooltiptext {\n"
"  visibility: hidden;\n"
"  width: 120px;\n"
"  background-color: #555;\n"
"  color: #fff;\n"
"  text-align: center;\n"
"  border-radius: 6px;\n"
"  padding: 5px 0;\n"
"  position: absolute;\n"
"  z-index: 1;\n"
"  bottom: 125%;\n"
"  left: 50%;\n"
"  margin-left: -60px;\n"
"  opacity: 0;\n"
"  transition: opacity 0.3s;\n"
"}\n"
"\n"
".tooltip .tooltiptext::after {\n"
"  content: \"\";\n"
"  position: absolute;\n"
"  top: 100%;\n"
"  left: 50%;\n"
"  margin-left: -5px;\n"
"  border-width: 5px;\n"
"  border-style: solid;\n"
"  border-color: #555 transparent transparent transparent;\n"
"}\n"
"\n"
".tooltip:hover .tooltiptext {\n"
"  visibility: visible;\n"
"  opacity: 1;\n"
"}\n"
"</style>\n"
"<body style=\"text-align:center;\">\n"
"\n"
"<h2>Unknown - Button ID: 1</h2>\n"
"<p>Button with ID 1 feature may be coming out soon explanatively.</p>\n"
"\n"
"<div class=\"tooltip\">Useful tips:\n"
"  <span class=\"tooltiptext\">Not Implemented Yet</span>\n"
"</div>\n"
"\n"
"</body>\n"
"</html>\n"
""))
        self.ButtonID01.setText(_translate("Widget", "1"))
        self.ButtonID02.setToolTip(_translate("Widget", "<!DOCTYPE html>\n"
"<html>\n"
"<style>\n"
".tooltip {\n"
"  position: relative;\n"
"  display: inline-block;\n"
"  border-bottom: 1px dotted black;\n"
"}\n"
"\n"
".tooltip .tooltiptext {\n"
"  visibility: hidden;\n"
"  width: 120px;\n"
"  background-color: #555;\n"
"  color: #fff;\n"
"  text-align: center;\n"
"  border-radius: 6px;\n"
"  padding: 5px 0;\n"
"  position: absolute;\n"
"  z-index: 1;\n"
"  bottom: 125%;\n"
"  left: 50%;\n"
"  margin-left: -60px;\n"
"  opacity: 0;\n"
"  transition: opacity 0.3s;\n"
"}\n"
"\n"
".tooltip .tooltiptext::after {\n"
"  content: \"\";\n"
"  position: absolute;\n"
"  top: 100%;\n"
"  left: 50%;\n"
"  margin-left: -5px;\n"
"  border-width: 5px;\n"
"  border-style: solid;\n"
"  border-color: #555 transparent transparent transparent;\n"
"}\n"
"\n"
".tooltip:hover .tooltiptext {\n"
"  visibility: visible;\n"
"  opacity: 1;\n"
"}\n"
"</style>\n"
"<body style=\"text-align:center;\">\n"
"\n"
"<h2>Unknown - Button ID: 2</h2>\n"
"<p>Button with ID 2 feature may be coming out soon explanatively.</p>\n"
"\n"
"<div class=\"tooltip\">Useful tips:\n"
"  <span class=\"tooltiptext\">Not Implemented Yet</span>\n"
"</div>\n"
"\n"
"</body>\n"
"</html>\n"
""))
        self.ButtonID02.setText(_translate("Widget", "2"))
        self.ButtonID03.setToolTip(_translate("Widget", "<!DOCTYPE html>\n"
"<html>\n"
"<style>\n"
".tooltip {\n"
"  position: relative;\n"
"  display: inline-block;\n"
"  border-bottom: 1px dotted black;\n"
"}\n"
"\n"
".tooltip .tooltiptext {\n"
"  visibility: hidden;\n"
"  width: 120px;\n"
"  background-color: #555;\n"
"  color: #fff;\n"
"  text-align: center;\n"
"  border-radius: 6px;\n"
"  padding: 5px 0;\n"
"  position: absolute;\n"
"  z-index: 1;\n"
"  bottom: 125%;\n"
"  left: 50%;\n"
"  margin-left: -60px;\n"
"  opacity: 0;\n"
"  transition: opacity 0.3s;\n"
"}\n"
"\n"
".tooltip .tooltiptext::after {\n"
"  content: \"\";\n"
"  position: absolute;\n"
"  top: 100%;\n"
"  left: 50%;\n"
"  margin-left: -5px;\n"
"  border-width: 5px;\n"
"  border-style: solid;\n"
"  border-color: #555 transparent transparent transparent;\n"
"}\n"
"\n"
".tooltip:hover .tooltiptext {\n"
"  visibility: visible;\n"
"  opacity: 1;\n"
"}\n"
"</style>\n"
"<body style=\"text-align:center;\">\n"
"\n"
"<h2>Unknown - Button ID: 3</h2>\n"
"<p>Button with ID 3 feature may be coming out soon explanatively.</p>\n"
"\n"
"<div class=\"tooltip\">Useful tips:\n"
"  <span class=\"tooltiptext\">Not Implemented Yet</span>\n"
"</div>\n"
"\n"
"</body>\n"
"</html>\n"
""))
        self.ButtonID03.setText(_translate("Widget", "3"))
        self.ButtonID04.setToolTip(_translate("Widget", "<!DOCTYPE html>\n"
"<html>\n"
"<style>\n"
".tooltip {\n"
"  position: relative;\n"
"  display: inline-block;\n"
"  border-bottom: 1px dotted black;\n"
"}\n"
"\n"
".tooltip .tooltiptext {\n"
"  visibility: hidden;\n"
"  width: 120px;\n"
"  background-color: #555;\n"
"  color: #fff;\n"
"  text-align: center;\n"
"  border-radius: 6px;\n"
"  padding: 5px 0;\n"
"  position: absolute;\n"
"  z-index: 1;\n"
"  bottom: 125%;\n"
"  left: 50%;\n"
"  margin-left: -60px;\n"
"  opacity: 0;\n"
"  transition: opacity 0.3s;\n"
"}\n"
"\n"
".tooltip .tooltiptext::after {\n"
"  content: \"\";\n"
"  position: absolute;\n"
"  top: 100%;\n"
"  left: 50%;\n"
"  margin-left: -5px;\n"
"  border-width: 5px;\n"
"  border-style: solid;\n"
"  border-color: #555 transparent transparent transparent;\n"
"}\n"
"\n"
".tooltip:hover .tooltiptext {\n"
"  visibility: visible;\n"
"  opacity: 1;\n"
"}\n"
"</style>\n"
"<body style=\"text-align:center;\">\n"
"\n"
"<h2>Unknown - Button ID: 4</h2>\n"
"<p>Button with ID 4 feature may be coming out soon explanatively.</p>\n"
"\n"
"<div class=\"tooltip\">Useful tips:\n"
"  <span class=\"tooltiptext\">Not Implemented Yet</span>\n"
"</div>\n"
"\n"
"</body>\n"
"</html>\n"
""))
        self.ButtonID04.setText(_translate("Widget", "4"))
        self.SliderReviewer.setToolTip(_translate("Widget", "<!DOCTYPE html>\n"
"<html>\n"
"<style>\n"
".tooltip {\n"
"  position: relative;\n"
"  display: inline-block;\n"
"  border-bottom: 1px dotted black;\n"
"}\n"
"\n"
".tooltip .tooltiptext {\n"
"  visibility: hidden;\n"
"  width: 120px;\n"
"  background-color: #555;\n"
"  color: #fff;\n"
"  text-align: center;\n"
"  border-radius: 6px;\n"
"  padding: 5px 0;\n"
"  position: absolute;\n"
"  z-index: 1;\n"
"  bottom: 125%;\n"
"  left: 50%;\n"
"  margin-left: -60px;\n"
"  opacity: 0;\n"
"  transition: opacity 0.3s;\n"
"}\n"
"\n"
".tooltip .tooltiptext::after {\n"
"  content: \"\";\n"
"  position: absolute;\n"
"  top: 100%;\n"
"  left: 50%;\n"
"  margin-left: -5px;\n"
"  border-width: 5px;\n"
"  border-style: solid;\n"
"  border-color: #555 transparent transparent transparent;\n"
"}\n"
"\n"
".tooltip:hover .tooltiptext {\n"
"  visibility: visible;\n"
"  opacity: 1;\n"
"}\n"
"</style>\n"
"<body style=\"text-align:center;\">\n"
"\n"
"<h2>Unknown - Plate Detection Slider (Manual Dragging Values)</h2>\n"
"<p>Acts as a usual slider as always, going from the least minimum value (assuming at 0), up to a certain maximum value as one pinpointed at the right side mini slider value displayer.</p>\n"
"\n"
"<div class=\"tooltip\">Useful tips:\n"
"  <span class=\"tooltiptext\">Not Implemented Yet</span>\n"
"</div>\n"
"\n"
"</body>\n"
"</html>\n"
""))
        self.LeftSideSliderNumberDisplayer.setToolTip(_translate("Widget", "<!DOCTYPE html>\n"
"<html>\n"
"<style>\n"
".tooltip {\n"
"  position: relative;\n"
"  display: inline-block;\n"
"  border-bottom: 1px dotted black;\n"
"}\n"
"\n"
".tooltip .tooltiptext {\n"
"  visibility: hidden;\n"
"  width: 120px;\n"
"  background-color: #555;\n"
"  color: #fff;\n"
"  text-align: center;\n"
"  border-radius: 6px;\n"
"  padding: 5px 0;\n"
"  position: absolute;\n"
"  z-index: 1;\n"
"  bottom: 125%;\n"
"  left: 50%;\n"
"  margin-left: -60px;\n"
"  opacity: 0;\n"
"  transition: opacity 0.3s;\n"
"}\n"
"\n"
".tooltip .tooltiptext::after {\n"
"  content: \"\";\n"
"  position: absolute;\n"
"  top: 100%;\n"
"  left: 50%;\n"
"  margin-left: -5px;\n"
"  border-width: 5px;\n"
"  border-style: solid;\n"
"  border-color: #555 transparent transparent transparent;\n"
"}\n"
"\n"
".tooltip:hover .tooltiptext {\n"
"  visibility: visible;\n"
"  opacity: 1;\n"
"}\n"
"</style>\n"
"<body style=\"text-align:center;\">\n"
"\n"
"<h2>Unknown - Display Slider Value (Left Side)</h2>\n"
"<p>Mini slider value displayer for showing a current specific value representing the amount of upsteps of value by the slider (possibility going from the least minimum: 0, up to certain maximum value of the slider).</p>\n"
"\n"
"<div class=\"tooltip\">Useful tips:\n"
"  <span class=\"tooltiptext\">Not Implemented Yet</span>\n"
"</div>\n"
"\n"
"</body>\n"
"</html>\n"
""))
        self.LeftSideSliderNumberDisplayer.setText(_translate("Widget", "00.00"))
        self.RightSideSliderNumberDisplayer.setToolTip(_translate("Widget", "<!DOCTYPE html>\n"
"<html>\n"
"<style>\n"
".tooltip {\n"
"  position: relative;\n"
"  display: inline-block;\n"
"  border-bottom: 1px dotted black;\n"
"}\n"
"\n"
".tooltip .tooltiptext {\n"
"  visibility: hidden;\n"
"  width: 120px;\n"
"  background-color: #555;\n"
"  color: #fff;\n"
"  text-align: center;\n"
"  border-radius: 6px;\n"
"  padding: 5px 0;\n"
"  position: absolute;\n"
"  z-index: 1;\n"
"  bottom: 125%;\n"
"  left: 50%;\n"
"  margin-left: -60px;\n"
"  opacity: 0;\n"
"  transition: opacity 0.3s;\n"
"}\n"
"\n"
".tooltip .tooltiptext::after {\n"
"  content: \"\";\n"
"  position: absolute;\n"
"  top: 100%;\n"
"  left: 50%;\n"
"  margin-left: -5px;\n"
"  border-width: 5px;\n"
"  border-style: solid;\n"
"  border-color: #555 transparent transparent transparent;\n"
"}\n"
"\n"
".tooltip:hover .tooltiptext {\n"
"  visibility: visible;\n"
"  opacity: 1;\n"
"}\n"
"</style>\n"
"<body style=\"text-align:center;\">\n"
"\n"
"<h2>Unknown - Display Slider Value (Right Side)</h2>\n"
"<p>Mini slider value displayer for showing a current specific value representing the amount of upsteps of value by the slider (possibility for the maximum slider value).</p>\n"
"\n"
"<div class=\"tooltip\">Useful tips:\n"
"  <span class=\"tooltiptext\">Not Implemented Yet</span>\n"
"</div>\n"
"\n"
"</body>\n"
"</html>\n"
""))
        self.RightSideSliderNumberDisplayer.setText(_translate("Widget", "00.00"))
        self.ShowResultZone1.setToolTip(_translate("Widget", "<!DOCTYPE html>\n"
"<html>\n"
"<style>\n"
".tooltip {\n"
"  position: relative;\n"
"  display: inline-block;\n"
"  border-bottom: 1px dotted black;\n"
"}\n"
"\n"
".tooltip .tooltiptext {\n"
"  visibility: hidden;\n"
"  width: 120px;\n"
"  background-color: #555;\n"
"  color: #fff;\n"
"  text-align: center;\n"
"  border-radius: 6px;\n"
"  padding: 5px 0;\n"
"  position: absolute;\n"
"  z-index: 1;\n"
"  bottom: 125%;\n"
"  left: 50%;\n"
"  margin-left: -60px;\n"
"  opacity: 0;\n"
"  transition: opacity 0.3s;\n"
"}\n"
"\n"
".tooltip .tooltiptext::after {\n"
"  content: \"\";\n"
"  position: absolute;\n"
"  top: 100%;\n"
"  left: 50%;\n"
"  margin-left: -5px;\n"
"  border-width: 5px;\n"
"  border-style: solid;\n"
"  border-color: #555 transparent transparent transparent;\n"
"}\n"
"\n"
".tooltip:hover .tooltiptext {\n"
"  visibility: visible;\n"
"  opacity: 1;\n"
"}\n"
"</style>\n"
"<body style=\"text-align:center;\">\n"
"\n"
"<h2>Plate Detection - Show Result (Zone 1)</h2>\n"
"<p>Use for displaying the given result based on the count detections and predictions.</p>\n"
"\n"
"<div class=\"tooltip\">Useful tips:\n"
"  <span class=\"tooltiptext\">Given Plate Detection Result</span>\n"
"</div>\n"
"\n"
"</body>\n"
"</html>\n"
""))
        self.ShowResultZone1.setText(_translate("Widget", "Result (Zone 1)"))
        self.ShowResultZone2.setToolTip(_translate("Widget", "<!DOCTYPE html>\n"
"<html>\n"
"<style>\n"
".tooltip {\n"
"  position: relative;\n"
"  display: inline-block;\n"
"  border-bottom: 1px dotted black;\n"
"}\n"
"\n"
".tooltip .tooltiptext {\n"
"  visibility: hidden;\n"
"  width: 120px;\n"
"  background-color: #555;\n"
"  color: #fff;\n"
"  text-align: center;\n"
"  border-radius: 6px;\n"
"  padding: 5px 0;\n"
"  position: absolute;\n"
"  z-index: 1;\n"
"  bottom: 125%;\n"
"  left: 50%;\n"
"  margin-left: -60px;\n"
"  opacity: 0;\n"
"  transition: opacity 0.3s;\n"
"}\n"
"\n"
".tooltip .tooltiptext::after {\n"
"  content: \"\";\n"
"  position: absolute;\n"
"  top: 100%;\n"
"  left: 50%;\n"
"  margin-left: -5px;\n"
"  border-width: 5px;\n"
"  border-style: solid;\n"
"  border-color: #555 transparent transparent transparent;\n"
"}\n"
"\n"
".tooltip:hover .tooltiptext {\n"
"  visibility: visible;\n"
"  opacity: 1;\n"
"}\n"
"</style>\n"
"<body style=\"text-align:center;\">\n"
"\n"
"<h2>Plate Detection - Show Result (Zone 2)</h2>\n"
"<p>Use for displaying the given result based on the count detections and predictions.</p>\n"
"\n"
"<div class=\"tooltip\">Useful tips:\n"
"  <span class=\"tooltiptext\">Given Plate Detection Result</span>\n"
"</div>\n"
"\n"
"</body>\n"
"</html>\n"
""))
        self.ShowResultZone2.setText(_translate("Widget", "Result (Zone 2)"))
        self.FCFV_FZOF_SecondModeRadioButton.setText(_translate("Widget", "Mode 2"))
        self.FCFV_FZOF_FirstModeRadioButton.setText(_translate("Widget", "Mode 1"))
        self.FCFV_FZOF_BetaLabel.setToolTip(_translate("Widget", "<!DOCTYPE html>\n"
"<html>\n"
"<style>\n"
".tooltip {\n"
"  position: relative;\n"
"  display: inline-block;\n"
"  border-bottom: 1px dotted black;\n"
"}\n"
"\n"
".tooltip .tooltiptext {\n"
"  visibility: hidden;\n"
"  width: 120px;\n"
"  background-color: #555;\n"
"  color: #fff;\n"
"  text-align: center;\n"
"  border-radius: 6px;\n"
"  padding: 5px 0;\n"
"  position: absolute;\n"
"  z-index: 1;\n"
"  bottom: 125%;\n"
"  left: 50%;\n"
"  margin-left: -60px;\n"
"  opacity: 0;\n"
"  transition: opacity 0.3s;\n"
"}\n"
"\n"
".tooltip .tooltiptext::after {\n"
"  content: \"\";\n"
"  position: absolute;\n"
"  top: 100%;\n"
"  left: 50%;\n"
"  margin-left: -5px;\n"
"  border-width: 5px;\n"
"  border-style: solid;\n"
"  border-color: #555 transparent transparent transparent;\n"
"}\n"
"\n"
".tooltip:hover .tooltiptext {\n"
"  visibility: visible;\n"
"  opacity: 1;\n"
"}\n"
"</style>\n"
"<body style=\"text-align:center;\">\n"
"\n"
"<h2>Spin Box - (β) Beta Value</h2>\n"
"<p>Set out the beta (β) value within the range of 0 up to 1,000 (excluding negative numbers and numbers above 1,000 for now).</p>\n"
"\n"
"<div class=\"tooltip\">Useful tips:\n"
"  <span class=\"tooltiptext\">0-1,000 Only</span>\n"
"</div>\n"
"\n"
"</body>\n"
"</html>\n"
""))
        self.FCFV_FZOF_BetaLabel.setText(_translate("Widget", "Beta (β)"))
        self.FCFV_FZOF_RotateLabel.setToolTip(_translate("Widget", "<!DOCTYPE html>\n"
"<html>\n"
"<style>\n"
".tooltip {\n"
"  position: relative;\n"
"  display: inline-block;\n"
"  border-bottom: 1px dotted black;\n"
"}\n"
"\n"
".tooltip .tooltiptext {\n"
"  visibility: hidden;\n"
"  width: 120px;\n"
"  background-color: #555;\n"
"  color: #fff;\n"
"  text-align: center;\n"
"  border-radius: 6px;\n"
"  padding: 5px 0;\n"
"  position: absolute;\n"
"  z-index: 1;\n"
"  bottom: 125%;\n"
"  left: 50%;\n"
"  margin-left: -60px;\n"
"  opacity: 0;\n"
"  transition: opacity 0.3s;\n"
"}\n"
"\n"
".tooltip .tooltiptext::after {\n"
"  content: \"\";\n"
"  position: absolute;\n"
"  top: 100%;\n"
"  left: 50%;\n"
"  margin-left: -5px;\n"
"  border-width: 5px;\n"
"  border-style: solid;\n"
"  border-color: #555 transparent transparent transparent;\n"
"}\n"
"\n"
".tooltip:hover .tooltiptext {\n"
"  visibility: visible;\n"
"  opacity: 1;\n"
"}\n"
"</style>\n"
"<body style=\"text-align:center;\">\n"
"\n"
"<h2>Spin Box - Degrees</h2>\n"
"<p>Drag up/down the spin box (or capture exact degrees value), going from 0 up to 360.</p>\n"
"\n"
"<div class=\"tooltip\">Useful tips:\n"
"  <span class=\"tooltiptext\">0-360 Only</span>\n"
"</div>\n"
"\n"
"</body>\n"
"</html>\n"
""))
        self.FCFV_FZOF_RotateLabel.setText(_translate("Widget", "Rotate (degrees)"))
        self.FCFV_FZOF_AlphaSpinBox.setToolTip(_translate("Widget", "<!DOCTYPE html>\n"
"<html>\n"
"<style>\n"
".tooltip {\n"
"  position: relative;\n"
"  display: inline-block;\n"
"  border-bottom: 1px dotted black;\n"
"}\n"
"\n"
".tooltip .tooltiptext {\n"
"  visibility: hidden;\n"
"  width: 120px;\n"
"  background-color: #555;\n"
"  color: #fff;\n"
"  text-align: center;\n"
"  border-radius: 6px;\n"
"  padding: 5px 0;\n"
"  position: absolute;\n"
"  z-index: 1;\n"
"  bottom: 125%;\n"
"  left: 50%;\n"
"  margin-left: -60px;\n"
"  opacity: 0;\n"
"  transition: opacity 0.3s;\n"
"}\n"
"\n"
".tooltip .tooltiptext::after {\n"
"  content: \"\";\n"
"  position: absolute;\n"
"  top: 100%;\n"
"  left: 50%;\n"
"  margin-left: -5px;\n"
"  border-width: 5px;\n"
"  border-style: solid;\n"
"  border-color: #555 transparent transparent transparent;\n"
"}\n"
"\n"
".tooltip:hover .tooltiptext {\n"
"  visibility: visible;\n"
"  opacity: 1;\n"
"}\n"
"</style>\n"
"<body style=\"text-align:center;\">\n"
"\n"
"<h2>Spin Box - (α) Alpha Value</h2>\n"
"<p>Set out the alpha (α) value within the range of 0 up to 1,000 (excluding negative numbers and numbers above 1,000 for now).</p>\n"
"\n"
"<div class=\"tooltip\">Useful tips:\n"
"  <span class=\"tooltiptext\">0-1,000 Only</span>\n"
"</div>\n"
"\n"
"</body>\n"
"</html>\n"
""))
        self.FCFV_FZOF_ZoomInOutLabel.setToolTip(_translate("Widget", "<!DOCTYPE html>\n"
"<html>\n"
"<style>\n"
".tooltip {\n"
"  position: relative;\n"
"  display: inline-block;\n"
"  border-bottom: 1px dotted black;\n"
"}\n"
"\n"
".tooltip .tooltiptext {\n"
"  visibility: hidden;\n"
"  width: 120px;\n"
"  background-color: #555;\n"
"  color: #fff;\n"
"  text-align: center;\n"
"  border-radius: 6px;\n"
"  padding: 5px 0;\n"
"  position: absolute;\n"
"  z-index: 1;\n"
"  bottom: 125%;\n"
"  left: 50%;\n"
"  margin-left: -60px;\n"
"  opacity: 0;\n"
"  transition: opacity 0.3s;\n"
"}\n"
"\n"
".tooltip .tooltiptext::after {\n"
"  content: \"\";\n"
"  position: absolute;\n"
"  top: 100%;\n"
"  left: 50%;\n"
"  margin-left: -5px;\n"
"  border-width: 5px;\n"
"  border-style: solid;\n"
"  border-color: #555 transparent transparent transparent;\n"
"}\n"
"\n"
".tooltip:hover .tooltiptext {\n"
"  visibility: visible;\n"
"  opacity: 1;\n"
"}\n"
"</style>\n"
"<body style=\"text-align:center;\">\n"
"\n"
"<h2>Spin Box - Zoom (IN/OUT) Value</h2>\n"
"<p>Set out the beta (β) value within the range of 0 up to 100 (excluding negative numbers and numbers above 100 for now).</p>\n"
"\n"
"<div class=\"tooltip\">Useful tips:\n"
"  <span class=\"tooltiptext\">0-100 Only</span>\n"
"</div>\n"
"\n"
"</body>\n"
"</html>\n"
""))
        self.FCFV_FZOF_ZoomInOutLabel.setText(_translate("Widget", "Zoom (in/out)"))
        self.FCFV_FZOF_AlphaLabel.setToolTip(_translate("Widget", "<!DOCTYPE html>\n"
"<html>\n"
"<style>\n"
".tooltip {\n"
"  position: relative;\n"
"  display: inline-block;\n"
"  border-bottom: 1px dotted black;\n"
"}\n"
"\n"
".tooltip .tooltiptext {\n"
"  visibility: hidden;\n"
"  width: 120px;\n"
"  background-color: #555;\n"
"  color: #fff;\n"
"  text-align: center;\n"
"  border-radius: 6px;\n"
"  padding: 5px 0;\n"
"  position: absolute;\n"
"  z-index: 1;\n"
"  bottom: 125%;\n"
"  left: 50%;\n"
"  margin-left: -60px;\n"
"  opacity: 0;\n"
"  transition: opacity 0.3s;\n"
"}\n"
"\n"
".tooltip .tooltiptext::after {\n"
"  content: \"\";\n"
"  position: absolute;\n"
"  top: 100%;\n"
"  left: 50%;\n"
"  margin-left: -5px;\n"
"  border-width: 5px;\n"
"  border-style: solid;\n"
"  border-color: #555 transparent transparent transparent;\n"
"}\n"
"\n"
".tooltip:hover .tooltiptext {\n"
"  visibility: visible;\n"
"  opacity: 1;\n"
"}\n"
"</style>\n"
"<body style=\"text-align:center;\">\n"
"\n"
"<h2>Spin Box - (α) Alpha Value</h2>\n"
"<p>Set out the alpha (α) value within the range of 0 up to 1,000 (excluding negative numbers and numbers above 1,000 for now).</p>\n"
"\n"
"<div class=\"tooltip\">Useful tips:\n"
"  <span class=\"tooltiptext\">0-1,000 Only</span>\n"
"</div>\n"
"\n"
"</body>\n"
"</html>\n"
""))
        self.FCFV_FZOF_AlphaLabel.setText(_translate("Widget", "Alpha (α)"))
        self.FCFV_FZOF_BetaSpinBox.setToolTip(_translate("Widget", "<!DOCTYPE html>\n"
"<html>\n"
"<style>\n"
".tooltip {\n"
"  position: relative;\n"
"  display: inline-block;\n"
"  border-bottom: 1px dotted black;\n"
"}\n"
"\n"
".tooltip .tooltiptext {\n"
"  visibility: hidden;\n"
"  width: 120px;\n"
"  background-color: #555;\n"
"  color: #fff;\n"
"  text-align: center;\n"
"  border-radius: 6px;\n"
"  padding: 5px 0;\n"
"  position: absolute;\n"
"  z-index: 1;\n"
"  bottom: 125%;\n"
"  left: 50%;\n"
"  margin-left: -60px;\n"
"  opacity: 0;\n"
"  transition: opacity 0.3s;\n"
"}\n"
"\n"
".tooltip .tooltiptext::after {\n"
"  content: \"\";\n"
"  position: absolute;\n"
"  top: 100%;\n"
"  left: 50%;\n"
"  margin-left: -5px;\n"
"  border-width: 5px;\n"
"  border-style: solid;\n"
"  border-color: #555 transparent transparent transparent;\n"
"}\n"
"\n"
".tooltip:hover .tooltiptext {\n"
"  visibility: visible;\n"
"  opacity: 1;\n"
"}\n"
"</style>\n"
"<body style=\"text-align:center;\">\n"
"\n"
"<h2>Spin Box - (β) Beta Value</h2>\n"
"<p>Set out the beta (β) value within the range of 0 up to 1,000 (excluding negative numbers and numbers above 1,000 for now).</p>\n"
"\n"
"<div class=\"tooltip\">Useful tips:\n"
"  <span class=\"tooltiptext\">0-1,000 Only</span>\n"
"</div>\n"
"\n"
"</body>\n"
"</html>\n"
""))
        self.FCFV_FZOF_ZoomInOutSpinBox.setToolTip(_translate("Widget", "<!DOCTYPE html>\n"
"<html>\n"
"<style>\n"
".tooltip {\n"
"  position: relative;\n"
"  display: inline-block;\n"
"  border-bottom: 1px dotted black;\n"
"}\n"
"\n"
".tooltip .tooltiptext {\n"
"  visibility: hidden;\n"
"  width: 120px;\n"
"  background-color: #555;\n"
"  color: #fff;\n"
"  text-align: center;\n"
"  border-radius: 6px;\n"
"  padding: 5px 0;\n"
"  position: absolute;\n"
"  z-index: 1;\n"
"  bottom: 125%;\n"
"  left: 50%;\n"
"  margin-left: -60px;\n"
"  opacity: 0;\n"
"  transition: opacity 0.3s;\n"
"}\n"
"\n"
".tooltip .tooltiptext::after {\n"
"  content: \"\";\n"
"  position: absolute;\n"
"  top: 100%;\n"
"  left: 50%;\n"
"  margin-left: -5px;\n"
"  border-width: 5px;\n"
"  border-style: solid;\n"
"  border-color: #555 transparent transparent transparent;\n"
"}\n"
"\n"
".tooltip:hover .tooltiptext {\n"
"  visibility: visible;\n"
"  opacity: 1;\n"
"}\n"
"</style>\n"
"<body style=\"text-align:center;\">\n"
"\n"
"<h2>Spin Box - Zoom (IN/OUT) Value</h2>\n"
"<p>Set out the beta (β) value within the range of 0 up to 100 (excluding negative numbers and numbers above 100 for now).</p>\n"
"\n"
"<div class=\"tooltip\">Useful tips:\n"
"  <span class=\"tooltiptext\">0-100 Only</span>\n"
"</div>\n"
"\n"
"</body>\n"
"</html>\n"
""))
        self.FCFV_FZOF_RotateSpinBox.setToolTip(_translate("Widget", "<!DOCTYPE html>\n"
"<html>\n"
"<style>\n"
".tooltip {\n"
"  position: relative;\n"
"  display: inline-block;\n"
"  border-bottom: 1px dotted black;\n"
"}\n"
"\n"
".tooltip .tooltiptext {\n"
"  visibility: hidden;\n"
"  width: 120px;\n"
"  background-color: #555;\n"
"  color: #fff;\n"
"  text-align: center;\n"
"  border-radius: 6px;\n"
"  padding: 5px 0;\n"
"  position: absolute;\n"
"  z-index: 1;\n"
"  bottom: 125%;\n"
"  left: 50%;\n"
"  margin-left: -60px;\n"
"  opacity: 0;\n"
"  transition: opacity 0.3s;\n"
"}\n"
"\n"
".tooltip .tooltiptext::after {\n"
"  content: \"\";\n"
"  position: absolute;\n"
"  top: 100%;\n"
"  left: 50%;\n"
"  margin-left: -5px;\n"
"  border-width: 5px;\n"
"  border-style: solid;\n"
"  border-color: #555 transparent transparent transparent;\n"
"}\n"
"\n"
".tooltip:hover .tooltiptext {\n"
"  visibility: visible;\n"
"  opacity: 1;\n"
"}\n"
"</style>\n"
"<body style=\"text-align:center;\">\n"
"\n"
"<h2>Spin Box - Degrees</h2>\n"
"<p>Drag up/down the spin box (or capture exact degrees value), going from 0 up to 360.</p>\n"
"\n"
"<div class=\"tooltip\">Useful tips:\n"
"  <span class=\"tooltiptext\">0-360 Only</span>\n"
"</div>\n"
"\n"
"</body>\n"
"</html>\n"
""))
        self.FCFV_SZOF_BetaSpinBox.setToolTip(_translate("Widget", "<!DOCTYPE html>\n"
"<html>\n"
"<style>\n"
".tooltip {\n"
"  position: relative;\n"
"  display: inline-block;\n"
"  border-bottom: 1px dotted black;\n"
"}\n"
"\n"
".tooltip .tooltiptext {\n"
"  visibility: hidden;\n"
"  width: 120px;\n"
"  background-color: #555;\n"
"  color: #fff;\n"
"  text-align: center;\n"
"  border-radius: 6px;\n"
"  padding: 5px 0;\n"
"  position: absolute;\n"
"  z-index: 1;\n"
"  bottom: 125%;\n"
"  left: 50%;\n"
"  margin-left: -60px;\n"
"  opacity: 0;\n"
"  transition: opacity 0.3s;\n"
"}\n"
"\n"
".tooltip .tooltiptext::after {\n"
"  content: \"\";\n"
"  position: absolute;\n"
"  top: 100%;\n"
"  left: 50%;\n"
"  margin-left: -5px;\n"
"  border-width: 5px;\n"
"  border-style: solid;\n"
"  border-color: #555 transparent transparent transparent;\n"
"}\n"
"\n"
".tooltip:hover .tooltiptext {\n"
"  visibility: visible;\n"
"  opacity: 1;\n"
"}\n"
"</style>\n"
"<body style=\"text-align:center;\">\n"
"\n"
"<h2>Spin Box - (β) Beta Value</h2>\n"
"<p>Set out the beta (β) value within the range of 0 up to 1,000 (excluding negative numbers and numbers above 1,000 for now).</p>\n"
"\n"
"<div class=\"tooltip\">Useful tips:\n"
"  <span class=\"tooltiptext\">0-1,000 Only</span>\n"
"</div>\n"
"\n"
"</body>\n"
"</html>\n"
""))
        self.FCFV_SZOF_ZoomInOutSpinBox.setToolTip(_translate("Widget", "<!DOCTYPE html>\n"
"<html>\n"
"<style>\n"
".tooltip {\n"
"  position: relative;\n"
"  display: inline-block;\n"
"  border-bottom: 1px dotted black;\n"
"}\n"
"\n"
".tooltip .tooltiptext {\n"
"  visibility: hidden;\n"
"  width: 120px;\n"
"  background-color: #555;\n"
"  color: #fff;\n"
"  text-align: center;\n"
"  border-radius: 6px;\n"
"  padding: 5px 0;\n"
"  position: absolute;\n"
"  z-index: 1;\n"
"  bottom: 125%;\n"
"  left: 50%;\n"
"  margin-left: -60px;\n"
"  opacity: 0;\n"
"  transition: opacity 0.3s;\n"
"}\n"
"\n"
".tooltip .tooltiptext::after {\n"
"  content: \"\";\n"
"  position: absolute;\n"
"  top: 100%;\n"
"  left: 50%;\n"
"  margin-left: -5px;\n"
"  border-width: 5px;\n"
"  border-style: solid;\n"
"  border-color: #555 transparent transparent transparent;\n"
"}\n"
"\n"
".tooltip:hover .tooltiptext {\n"
"  visibility: visible;\n"
"  opacity: 1;\n"
"}\n"
"</style>\n"
"<body style=\"text-align:center;\">\n"
"\n"
"<h2>Spin Box - Zoom (IN/OUT) Value</h2>\n"
"<p>Set out the beta (β) value within the range of 0 up to 100 (excluding negative numbers and numbers above 100 for now).</p>\n"
"\n"
"<div class=\"tooltip\">Useful tips:\n"
"  <span class=\"tooltiptext\">0-100 Only</span>\n"
"</div>\n"
"\n"
"</body>\n"
"</html>\n"
""))
        self.FCFV_SZOF_AlphaSpinBox.setToolTip(_translate("Widget", "<!DOCTYPE html>\n"
"<html>\n"
"<style>\n"
".tooltip {\n"
"  position: relative;\n"
"  display: inline-block;\n"
"  border-bottom: 1px dotted black;\n"
"}\n"
"\n"
".tooltip .tooltiptext {\n"
"  visibility: hidden;\n"
"  width: 120px;\n"
"  background-color: #555;\n"
"  color: #fff;\n"
"  text-align: center;\n"
"  border-radius: 6px;\n"
"  padding: 5px 0;\n"
"  position: absolute;\n"
"  z-index: 1;\n"
"  bottom: 125%;\n"
"  left: 50%;\n"
"  margin-left: -60px;\n"
"  opacity: 0;\n"
"  transition: opacity 0.3s;\n"
"}\n"
"\n"
".tooltip .tooltiptext::after {\n"
"  content: \"\";\n"
"  position: absolute;\n"
"  top: 100%;\n"
"  left: 50%;\n"
"  margin-left: -5px;\n"
"  border-width: 5px;\n"
"  border-style: solid;\n"
"  border-color: #555 transparent transparent transparent;\n"
"}\n"
"\n"
".tooltip:hover .tooltiptext {\n"
"  visibility: visible;\n"
"  opacity: 1;\n"
"}\n"
"</style>\n"
"<body style=\"text-align:center;\">\n"
"\n"
"<h2>Spin Box - (α) Alpha Value</h2>\n"
"<p>Set out the alpha (α) value within the range of 0 up to 1,000 (excluding negative numbers and numbers above 1,000 for now).</p>\n"
"\n"
"<div class=\"tooltip\">Useful tips:\n"
"  <span class=\"tooltiptext\">0-1,000 Only</span>\n"
"</div>\n"
"\n"
"</body>\n"
"</html>\n"
""))
        self.FCFV_SZOF_FirstModeRadioButton.setText(_translate("Widget", "Mode 1"))
        self.FCFV_SZOF_ZoomInOutLabel.setToolTip(_translate("Widget", "<!DOCTYPE html>\n"
"<html>\n"
"<style>\n"
".tooltip {\n"
"  position: relative;\n"
"  display: inline-block;\n"
"  border-bottom: 1px dotted black;\n"
"}\n"
"\n"
".tooltip .tooltiptext {\n"
"  visibility: hidden;\n"
"  width: 120px;\n"
"  background-color: #555;\n"
"  color: #fff;\n"
"  text-align: center;\n"
"  border-radius: 6px;\n"
"  padding: 5px 0;\n"
"  position: absolute;\n"
"  z-index: 1;\n"
"  bottom: 125%;\n"
"  left: 50%;\n"
"  margin-left: -60px;\n"
"  opacity: 0;\n"
"  transition: opacity 0.3s;\n"
"}\n"
"\n"
".tooltip .tooltiptext::after {\n"
"  content: \"\";\n"
"  position: absolute;\n"
"  top: 100%;\n"
"  left: 50%;\n"
"  margin-left: -5px;\n"
"  border-width: 5px;\n"
"  border-style: solid;\n"
"  border-color: #555 transparent transparent transparent;\n"
"}\n"
"\n"
".tooltip:hover .tooltiptext {\n"
"  visibility: visible;\n"
"  opacity: 1;\n"
"}\n"
"</style>\n"
"<body style=\"text-align:center;\">\n"
"\n"
"<h2>Spin Box - Zoom (IN/OUT) Value</h2>\n"
"<p>Set out the beta (β) value within the range of 0 up to 100 (excluding negative numbers and numbers above 100 for now).</p>\n"
"\n"
"<div class=\"tooltip\">Useful tips:\n"
"  <span class=\"tooltiptext\">0-100 Only</span>\n"
"</div>\n"
"\n"
"</body>\n"
"</html>\n"
""))
        self.FCFV_SZOF_ZoomInOutLabel.setText(_translate("Widget", "Zoom (in/out)"))
        self.FCFV_SZOF_AlphaLabel.setToolTip(_translate("Widget", "<!DOCTYPE html>\n"
"<html>\n"
"<style>\n"
".tooltip {\n"
"  position: relative;\n"
"  display: inline-block;\n"
"  border-bottom: 1px dotted black;\n"
"}\n"
"\n"
".tooltip .tooltiptext {\n"
"  visibility: hidden;\n"
"  width: 120px;\n"
"  background-color: #555;\n"
"  color: #fff;\n"
"  text-align: center;\n"
"  border-radius: 6px;\n"
"  padding: 5px 0;\n"
"  position: absolute;\n"
"  z-index: 1;\n"
"  bottom: 125%;\n"
"  left: 50%;\n"
"  margin-left: -60px;\n"
"  opacity: 0;\n"
"  transition: opacity 0.3s;\n"
"}\n"
"\n"
".tooltip .tooltiptext::after {\n"
"  content: \"\";\n"
"  position: absolute;\n"
"  top: 100%;\n"
"  left: 50%;\n"
"  margin-left: -5px;\n"
"  border-width: 5px;\n"
"  border-style: solid;\n"
"  border-color: #555 transparent transparent transparent;\n"
"}\n"
"\n"
".tooltip:hover .tooltiptext {\n"
"  visibility: visible;\n"
"  opacity: 1;\n"
"}\n"
"</style>\n"
"<body style=\"text-align:center;\">\n"
"\n"
"<h2>Spin Box - (α) Alpha Value</h2>\n"
"<p>Set out the alpha (α) value within the range of 0 up to 1,000 (excluding negative numbers and numbers above 1,000 for now).</p>\n"
"\n"
"<div class=\"tooltip\">Useful tips:\n"
"  <span class=\"tooltiptext\">0-1,000 Only</span>\n"
"</div>\n"
"\n"
"</body>\n"
"</html>\n"
""))
        self.FCFV_SZOF_AlphaLabel.setText(_translate("Widget", "Alpha (α)"))
        self.FCFV_SZOF_SecondModeRadioButton.setText(_translate("Widget", "Mode 2"))
        self.FCFV_SZOF_RotateSpinBox.setToolTip(_translate("Widget", "<!DOCTYPE html>\n"
"<html>\n"
"<style>\n"
".tooltip {\n"
"  position: relative;\n"
"  display: inline-block;\n"
"  border-bottom: 1px dotted black;\n"
"}\n"
"\n"
".tooltip .tooltiptext {\n"
"  visibility: hidden;\n"
"  width: 120px;\n"
"  background-color: #555;\n"
"  color: #fff;\n"
"  text-align: center;\n"
"  border-radius: 6px;\n"
"  padding: 5px 0;\n"
"  position: absolute;\n"
"  z-index: 1;\n"
"  bottom: 125%;\n"
"  left: 50%;\n"
"  margin-left: -60px;\n"
"  opacity: 0;\n"
"  transition: opacity 0.3s;\n"
"}\n"
"\n"
".tooltip .tooltiptext::after {\n"
"  content: \"\";\n"
"  position: absolute;\n"
"  top: 100%;\n"
"  left: 50%;\n"
"  margin-left: -5px;\n"
"  border-width: 5px;\n"
"  border-style: solid;\n"
"  border-color: #555 transparent transparent transparent;\n"
"}\n"
"\n"
".tooltip:hover .tooltiptext {\n"
"  visibility: visible;\n"
"  opacity: 1;\n"
"}\n"
"</style>\n"
"<body style=\"text-align:center;\">\n"
"\n"
"<h2>Spin Box - Degrees</h2>\n"
"<p>Drag up/down the spin box (or capture exact degrees value), going from 0 up to 360.</p>\n"
"\n"
"<div class=\"tooltip\">Useful tips:\n"
"  <span class=\"tooltiptext\">0-360 Only</span>\n"
"</div>\n"
"\n"
"</body>\n"
"</html>\n"
""))
        self.FCFV_SZOF_RotateLabel.setToolTip(_translate("Widget", "<!DOCTYPE html>\n"
"<html>\n"
"<style>\n"
".tooltip {\n"
"  position: relative;\n"
"  display: inline-block;\n"
"  border-bottom: 1px dotted black;\n"
"}\n"
"\n"
".tooltip .tooltiptext {\n"
"  visibility: hidden;\n"
"  width: 120px;\n"
"  background-color: #555;\n"
"  color: #fff;\n"
"  text-align: center;\n"
"  border-radius: 6px;\n"
"  padding: 5px 0;\n"
"  position: absolute;\n"
"  z-index: 1;\n"
"  bottom: 125%;\n"
"  left: 50%;\n"
"  margin-left: -60px;\n"
"  opacity: 0;\n"
"  transition: opacity 0.3s;\n"
"}\n"
"\n"
".tooltip .tooltiptext::after {\n"
"  content: \"\";\n"
"  position: absolute;\n"
"  top: 100%;\n"
"  left: 50%;\n"
"  margin-left: -5px;\n"
"  border-width: 5px;\n"
"  border-style: solid;\n"
"  border-color: #555 transparent transparent transparent;\n"
"}\n"
"\n"
".tooltip:hover .tooltiptext {\n"
"  visibility: visible;\n"
"  opacity: 1;\n"
"}\n"
"</style>\n"
"<body style=\"text-align:center;\">\n"
"\n"
"<h2>Spin Box - Degrees</h2>\n"
"<p>Drag up/down the spin box (or capture exact degrees value), going from 0 up to 360.</p>\n"
"\n"
"<div class=\"tooltip\">Useful tips:\n"
"  <span class=\"tooltiptext\">0-360 Only</span>\n"
"</div>\n"
"\n"
"</body>\n"
"</html>\n"
""))
        self.FCFV_SZOF_RotateLabel.setText(_translate("Widget", "Rotate (degrees)"))
        self.FCFV_SZOF_BetaLabel.setToolTip(_translate("Widget", "<!DOCTYPE html>\n"
"<html>\n"
"<style>\n"
".tooltip {\n"
"  position: relative;\n"
"  display: inline-block;\n"
"  border-bottom: 1px dotted black;\n"
"}\n"
"\n"
".tooltip .tooltiptext {\n"
"  visibility: hidden;\n"
"  width: 120px;\n"
"  background-color: #555;\n"
"  color: #fff;\n"
"  text-align: center;\n"
"  border-radius: 6px;\n"
"  padding: 5px 0;\n"
"  position: absolute;\n"
"  z-index: 1;\n"
"  bottom: 125%;\n"
"  left: 50%;\n"
"  margin-left: -60px;\n"
"  opacity: 0;\n"
"  transition: opacity 0.3s;\n"
"}\n"
"\n"
".tooltip .tooltiptext::after {\n"
"  content: \"\";\n"
"  position: absolute;\n"
"  top: 100%;\n"
"  left: 50%;\n"
"  margin-left: -5px;\n"
"  border-width: 5px;\n"
"  border-style: solid;\n"
"  border-color: #555 transparent transparent transparent;\n"
"}\n"
"\n"
".tooltip:hover .tooltiptext {\n"
"  visibility: visible;\n"
"  opacity: 1;\n"
"}\n"
"</style>\n"
"<body style=\"text-align:center;\">\n"
"\n"
"<h2>Spin Box - (β) Beta Value</h2>\n"
"<p>Set out the beta (β) value within the range of 0 up to 1,000 (excluding negative numbers and numbers above 1,000 for now).</p>\n"
"\n"
"<div class=\"tooltip\">Useful tips:\n"
"  <span class=\"tooltiptext\">0-1,000 Only</span>\n"
"</div>\n"
"\n"
"</body>\n"
"</html>\n"
""))
        self.FCFV_SZOF_BetaLabel.setText(_translate("Widget", "Beta (β)"))
        self.CreationAndUsagePurposes.setText(_translate("Widget", "<i>Creation and Usage Purposes for: <strong>FTDC Lab Tel-U.</strong></i>"))
        self.OpenSourceReserved.setText(_translate("Widget", "<i>@Open Source Project (Reserved), <strong>January 2024</strong> by: <strong>Immanuel Eben.<strong></i>"))
        self.MyGitHubProfile.setText(_translate("Widget", "<strong>@GitHub: EintsWaveX</strong>"))
        self.LastModifiedApplicationDate.setText(_translate("Widget", "<i>Last Modified: 13th January 2024</i>"))

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Widget = QtWidgets.QWidget()
    ui = Ui_Widget()
    ui.setupUi(Widget)
    Widget.show()
    sys.exit(app.exec())
